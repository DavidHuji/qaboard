(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{160:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return b})),a.d(t,"default",(function(){return p}));var n=a(1),r=a(9),i=(a(0),a(184)),l=a(186),o={id:"visualizations",title:"Visualizing your algorithm's outputs",sidebar_label:"Visualizations"},c={id:"visualizations",title:"Visualizing your algorithm's outputs",description:"import useBaseUrl from '@docusaurus/useBaseUrl';\r",source:"@site/docs/visualizations.md",permalink:"/qaboard/docs/visualizations",sidebar_label:"Visualizations",sidebar:"docs",previous:{title:"References & Milestones",permalink:"/qaboard/docs/references-and-milestones"},next:{title:"Batches of inputs",permalink:"/qaboard/docs/batches-running-on-multiple-inputs"}},b=[{value:"Available file viewers",id:"available-file-viewers",children:[{value:"Image viewer",id:"image-viewer",children:[]},{value:"Plot.ly viewer",id:"plotly-viewer",children:[]},{value:"Text Viewer",id:"text-viewer",children:[]},{value:"More Viewers?",id:"more-viewers",children:[]}]},{value:"Dynamic visualizations",id:"dynamic-visualizations",children:[]},{value:"Advanced Options EXPERIMENTAL",id:"advanced-options-experimental",children:[{value:"Custom Styles",id:"custom-styles",children:[]},{value:"Viewer Configuration",id:"viewer-configuration",children:[]}]}],s={rightToc:b};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"run()"),"function wrapping your code receives an ",Object(i.b)("inlineCode",{parentName:"p"},"output_directory")," where it can create all kinds of files. Usually, you only want to look at a few of those files, the rest being debug data. ",Object(i.b)("strong",{parentName:"p"},"Visualizations")," help you declare pre-sets of relevant files. "),Object(i.b)("p",null,"Here is a simple example, assuming your code an image named ",Object(i.b)("em",{parentName:"p"},"output.jpg"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"# qaboard.yaml\noutputs:\n    visualizations:\n    - path: output.jpg\n")),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("div",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"div"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"For now, to debug your visualizations, you have to commit and push your new ",Object(i.b)("em",{parentName:"p"},"qaboard.yaml"),".\nWe plan on letting you edit simply ",Object(i.b)("em",{parentName:"p"},"qaboard.yaml")," locally, and update the visualizations when you use ",Object(i.b)("inlineCode",{parentName:"p"},"qa --share"),"."))),Object(i.b)("p",null,"You can provide multiple relevant files, and hide debug visualizations by default: "),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:"{5-6}","{5-6}":!0}),"# qaboard.yaml\noutputs:\n    visualizations:\n    - path: output.jpg\n    - path: debug.jpg\n      default_hidden: true\n      # type: image/jpg # auto-guessed\n")),Object(i.b)("p",null,"Users will get switches to toggle debug visualizations:"),Object(i.b)("img",{alt:"toggle visualizations",src:Object(l.a)("img/hidden_by_default_switches.png")}),Object(i.b)("h2",{id:"available-file-viewers"},"Available file viewers"),Object(i.b)("p",null,"QA-Board tries to guess the right image viewer depending on the file extension or a ",Object(i.b)("inlineCode",{parentName:"p"},"type")),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Extenstions"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Viewer"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"*.jpg*"),", ",Object(i.b)("inlineCode",{parentName:"td"},"*.png*"),", ",Object(i.b)("inlineCode",{parentName:"td"},"*.bmp*"),", ",Object(i.b)("inlineCode",{parentName:"td"},"*.tif*"),", ",Object(i.b)("inlineCode",{parentName:"td"},"*.pdf*"),"..."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"image/*")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Image"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"*.plotly.json")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"plotly/json")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Plot.ly"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"*.mp4")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"video/*")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Video")," (synced)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"*.html")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"plain/html")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"HTML")," (assumes trusted input..!)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"*.txt"),", unidentified"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"text/plain*")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Text")," (diffs, with VSCode's ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"https://microsoft.github.io/monaco-editor/"}),"Monaco Editor"),")")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"</>")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"pointcloud/txt")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"pointcloud")," viewer (needs to be refactored, coupled to a specific internal project...)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"</>")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"6dof/txt")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"6DoF")," viewer (needs to be refactored, coupled to a specific internal project...)")))),Object(i.b)("h3",{id:"image-viewer"},"Image viewer"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Supports all common image formats."),Object(i.b)("li",{parentName:"ul"},"Fast and smooth zoom & pan, synced. Fast image streaming via ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://iiif.io"}),"IIIF"),"."),Object(i.b)("li",{parentName:"ul"},"Color tooltip."),Object(i.b)("li",{parentName:"ul"},"Perceptual color difference."),Object(i.b)("li",{parentName:"ul"},"Automatic regions of interest."),Object(i.b)("li",{parentName:"ul"},"Image filters (exposure, contrast, gamma...)."),Object(i.b)("li",{parentName:"ul"},"Histograms per channel.")),Object(i.b)("img",{alt:"Image viewer",src:Object(l.a)("img/image-viewer-autoroi.png")}),Object(i.b)("h3",{id:"plotly-viewer"},"Plot.ly viewer"),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://plot.ly/graphing-libraries/"}),"The Plotly library")," has everything you need from bar charts to 3d plots."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"huge variety of plots"),Object(i.b)("li",{parentName:"ul"},"interactive plots"),Object(i.b)("li",{parentName:"ul"},"easy-ish to use with binding to ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://plot.ly/python/getting-started/"}),"python"),"/JS/matlab..."),Object(i.b)("li",{parentName:"ul"},"web-based"),Object(i.b)("li",{parentName:"ul"},"open-source and popular"),Object(i.b)("li",{parentName:"ul"},"performant")),Object(i.b)("img",{alt:"plotly gallery",src:Object(l.a)("img/plotly-1.png")}),Object(i.b)("img",{alt:"3d plot with plotly for LSF/Calibration",src:Object(l.a)("img/plotly-3d-example.png")}),Object(i.b)("p",null,"All you need is to save your plot data as JSON. "),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"import plotly.graph_objects as go\nfig = go.Figure(data=go.Bar(y=[2, 3, 1]))\nwith open('graph.plotly.json', 'w') as f:\n  spec = fig.to_json() # '{\"layout\": {...}, \"data\": [{...}, {...}, ...]}'\n  f.write()\n")),Object(i.b)("h3",{id:"text-viewer"},"Text Viewer"),Object(i.b)("img",{alt:"Text/diff viewer",src:Object(l.a)("img/text-viewer.jpg")}),Object(i.b)("h3",{id:"more-viewers"},"More Viewers?"),Object(i.b)("p",null,"Contact us to tell us what you need! The backlog contains:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html"}),Object(i.b)("strong",{parentName:"a"},"Flame Graphs"))," and ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"http://www.brendangregg.com/blog/2014-11-09/differential-flame-graphs.html"}),Object(i.b)("strong",{parentName:"a"},"differential-flame-graphs"))," for software performance"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Config CDE:")," as graph like tensorboard"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://vega.github.io/vega/"}),Object(i.b)("strong",{parentName:"a"},"Vega")))),Object(i.b)("h2",{id:"dynamic-visualizations"},"Dynamic visualizations"),Object(i.b)("p",null,"You can use a ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/pillarjs/path-to-regexp"}),"special syntax")," to create dynamic visualizations at display-time. Users will we able to choose what to display using sliders / select options:"),Object(i.b)("img",{alt:"Viewing each frame of a movie",src:Object(l.a)("img/dynamic-outputs.gif")}),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:"{5,7}","{5,7}":!0}),'outputs:\n    visualizations:\n    - name: Movie Frames\n      # you can use the `/user/:name` syntax to match part of filenames\n      path: ":frame/output.jpg"\n      # you can match part of filenames (experimental)\n      path: ":frame/frame_:number.jpg"\n\n      # For more examples, the full syntax is available at:\n      # https://github.com/pillarjs/path-to-regexp\n\n')),Object(i.b)("p",null,"You can also use regular expressions ",Object(i.b)("strong",{parentName:"p"},"(inside parentheses!)")," to match which output files you want to view:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:"{4,6,8}","{4,6,8}":!0}),'outputs:\n    visualizations:\n      # A common use case is matching file extensions\n      path: "(.*\\.jpg)"\n      # ... or parts of filenames\n      path: "(debug_.*\\.jpg)"\n      # you can mix with the previous syntax\n      path: ":frame/(.*\\.txt)"\n\n      # If you use regular expressions, we aware that:\n      # - You MUST use "( )" aka "capture groups" !\n      # - While you can often get away "(.*)/output.jpg", in many cases you\'d want "([^/]*)/output.jpg"\n      # - Parts of paths matched via regular expressions are not synced with other outputs. Prefer the ":name" syntax\n      #   Eg if you ask also to visualize "(.*)/debug_output.jpg" and "(.*)/output.jpg"\n      #   you will get two select inputs for the frame.\n')),Object(i.b)("p",null,"By default, only one viewer/path is shown at a time, and you get sliders/select to decide what to show:"),Object(i.b)("img",{alt:"Everything is synced",src:Object(l.a)("img/dynamic-outputs-select.gif")}),Object(i.b)("p",null,"If you want, you can visualize all matching files:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:"{5-7}","{5-7}":!0}),'   # --snip--\n    - name: KPI reports\n      path: "reports/:report"\n      type: plotly/json\n      display: single  # (default): will list views one after the other\n             # all     # will render all matching paths/views\n             # viewer  # let the viewer decide what to do... (EXPERIMENTAL)\n')),Object(i.b)("h2",{id:"advanced-options-experimental"},"Advanced Options ","[EXPERIMENTAL]"),Object(i.b)("h3",{id:"custom-styles"},"Custom Styles"),Object(i.b)("p",null,"You can style your visualizations:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:"{3-7,10-12}","{3-7,10-12}":!0}),"outputs:\n    # define global or per-view styles\n    style:\n        # use any CSS properties\n        width: 500px\n        # the style will be applied to the outer-container\n        # and passed down to the viewers\n    detailed_views:\n    - name: My debug visualization\n      style:\n        width: 400px   \n")),Object(i.b)("h3",{id:"viewer-configuration"},"Viewer Configuration"),Object(i.b)("p",null,"Some viewers can read extra configuration parameters from their configuration: "),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:"{5}","{5}":!0}),"outputs:\n    detailed_views:\n    - name: My SLAM plot\n      type: 6dof/txt\n      show_3d: true\n")),Object(i.b)("p",null,'You can specify those parameters at "display-time" by defining controls:'),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:"{2-7}","{2-7}":!0}),"outputs:\n  controls:\n    - type: toggle\n      label: Debug\n      name: show_debug\n      default: false\n")))}p.isMDXComponent=!0},184:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return d}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var b=r.a.createContext({}),s=function(e){var t=r.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):o({},t,{},e)),a},p=function(e){var t=s(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),p=s(a),m=n,d=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return a?r.a.createElement(d,o({ref:t},b,{components:a})):r.a.createElement(d,o({ref:t},b))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var b=2;b<i;b++)l[b]=a[b];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},185:function(e,t,a){"use strict";var n=a(0),r=a(51);t.a=function(){return Object(n.useContext)(r.a)}},186:function(e,t,a){"use strict";a.d(t,"a",(function(){return r}));a(189);var n=a(185);function r(e){var t=(Object(n.a)().siteConfig||{}).baseUrl,a=void 0===t?"/":t;if(!e)return e;return/^(https?:|\/\/)/.test(e)?e:e.startsWith("/")?a+e.slice(1):a+e}},187:function(e,t,a){var n=a(70),r=a(23);e.exports=function(e,t,a){if(n(t))throw TypeError("String#"+a+" doesn't accept regex!");return String(r(e))}},188:function(e,t,a){var n=a(2)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(a){try{return t[n]=!1,!"/./"[e](t)}catch(r){}}return!0}},189:function(e,t,a){"use strict";var n=a(17),r=a(36),i=a(187),l="".startsWith;n(n.P+n.F*a(188)("startsWith"),"String",{startsWith:function(e){var t=i(this,e,"startsWith"),a=r(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),n=String(e);return l?l.call(t,n,a):t.slice(a,a+n.length)===n}})}}]);