"use strict";(self.webpackChunkApache_2_0=self.webpackChunkApache_2_0||[]).push([[1711],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2610:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={id:"dag-pipelines",title:"Defining Pipelines / DAG",sidebar_label:"Defining Pipelines / DAG"},s=void 0,p={unversionedId:"dag-pipelines",id:"dag-pipelines",title:"Defining Pipelines / DAG",description:"Nothing here is implemented available, it's at the API design stage. [Link-to-issue].",source:"@site/docs/dag-pipelines.md",sourceDirName:".",slug:"/dag-pipelines",permalink:"/qaboard/docs/dag-pipelines",editUrl:"https://github.com/Samsung/qaboard/edit/master/website/docs/docs/dag-pipelines.md",tags:[],version:"current",frontMatter:{id:"dag-pipelines",title:"Defining Pipelines / DAG",sidebar_label:"Defining Pipelines / DAG"},sidebar:"docs",previous:{title:"Tuning Workflows",permalink:"/qaboard/docs/tuning-workflows"},next:{title:"Bit Accuracy",permalink:"/qaboard/docs/bit-accuracy"}},c=[],u={toc:c};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Work-In-Progress")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Nothing here is implemented available, it's at the API design stage. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Samsung/qaboard/issues/10"},"[Link-to-issue]"),"."))),(0,r.kt)("p",null,"Currently QA-Board lacks expressivity for the common use-case of:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Run an algo on some images"),(0,r.kt)("li",{parentName:"ol"},"Calibration"),(0,r.kt)("li",{parentName:"ol"},"Validation")),(0,r.kt)("p",null,"Likewise, it can\u2019t handle nicely machine learning workflows (training/validation)."),(0,r.kt)("p",null,"Below are two workarounds people have used until now, and a proposition for built-in support in QA-Board."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Can you send me feedback / alternative ideas, or share to relevant people? Especially if you have experience with various flow engines, e.g. DVC. Thanks!"),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"The goal is a solution that is simple, expressive, and enables caching."))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Run qa batch multiple times, with each run expecting that results of the previous run are available ",(0,r.kt)("em",{parentName:"li"},"(as done with @rivka, @TF)"),".")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(+)")," Rather easy to do"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(-)")," The logic is outside QA-Board \u2013 it can\u2019t easily be used for tuning from the web UI \uf04b")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},'Create a "meta" run, with a heavy run() function that itself takes care of everything  ',(0,r.kt)("em",{parentName:"li"},"(as done with @eliav)"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(+)")," Easy to do"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(-)")," But very custom and not easy to use"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(-)")," There many tricky corners (running locally, filesystem issues on LSF) that should not be the  engineer\u2019s concern.")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},'"Built-in support" by QA-Board.\nOne possible way we could do it is by extending the syntax used to defined batches with a ',(0,r.kt)("inlineCode",{parentName:"li"},"needs:")," keyword:")),(0,r.kt)("p",null,"Simple example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'batch1:\n  inputs:\n  - A.jpg\n  - B.jpg\n  configurations:\n  - base\n\nbatch2:\n  needs: batch1\n  type: script\n  configurations:\n  - python my_script.py {o.output_dir for o in depends["batch1"]}\n\n# ? there is not really an "input" for a script, especially if it uses "depends"\n# ? if we depend on something I guess we could do without input, provide None...\n')),(0,r.kt)("p",null,'"Real-world" example:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"my-calibration-images:\n    configurations:\n    - base\n    inputs:\n    - DL50.raw\n    - DL55.raw\n    - DL65.raw\n    - DL75.raw\n\nmy-calibration:\n    needs:\n      calibration_images: my-calibration-images\n    type: script\n    configurations:\n    - python calibration.py ${o.output_directory for o in depends[calibration_images]}\n\nmy-evaluation-batch:\n    needs:\n      calibration: my-calibration\n    inputs:\n    - test_image_1.raw\n    - test_image_2.raw\n    - test_image_3.raw\n    configurations:\n    - base\n    - ${depends[calibration].output_directory}/calibration.cde\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ qa batch my-evaluation-batch\n#=> qa batch my-calibration-images\n#=> qa batch my-calibration\n#=> qa batch my-evaluation-batch\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(+)")," simple for users (I think so?)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(+)")," caching for free"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(?)")," need to define a clear API: how each job can lookup results of earlier jobs\u2026 And likely we will need naming-conventions for parameter tuning\u2026")))}m.isMDXComponent=!0}}]);