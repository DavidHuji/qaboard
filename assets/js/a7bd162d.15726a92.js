"use strict";(self.webpackChunkApache_2_0=self.webpackChunkApache_2_0||[]).push([[6257],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=i,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return t?a.createElement(h,o(o({ref:n},p),{},{components:t})):a.createElement(h,o({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3969:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return d},default:function(){return m}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),o=t(4996),l=["components"],s={id:"using-the-qa-cli",sidebar_label:"QA CLI Tips",title:"Tips for CLI usage"},c=void 0,p={unversionedId:"using-the-qa-cli",id:"using-the-qa-cli",title:"Tips for CLI usage",description:"CLI flags worth knowing",source:"@site/docs/using-the-qa-cli.md",sourceDirName:".",slug:"/using-the-qa-cli",permalink:"/qaboard/docs/using-the-qa-cli",editUrl:"https://github.com/Samsung/qaboard/edit/master/website/docs/docs/using-the-qa-cli.md",tags:[],version:"current",frontMatter:{id:"using-the-qa-cli",sidebar_label:"QA CLI Tips",title:"Tips for CLI usage"},sidebar:"docs",previous:{title:"Batches of Inputs",permalink:"/qaboard/docs/batches-running-on-multiple-inputs"},next:{title:"References & Milestones",permalink:"/qaboard/docs/references-and-milestones"}},d=[{value:"CLI flags worth knowing",id:"cli-flags-worth-knowing",children:[],level:2},{value:"<code>qa --help</code>",id:"qa---help",children:[],level:2},{value:"<code>qa --share</code>",id:"qa---share",children:[],level:2},{value:"<code>qa --dryrun</code>",id:"qa---dryrun",children:[],level:2},{value:"<code>qa --label my-label</code>",id:"qa---label-my-label",children:[],level:2},{value:"<code>qa batch</code>",id:"qa-batch",children:[{value:"Batch Runners",id:"batch-runners",children:[],level:3},{value:"Dealing with existing results",id:"dealing-with-existing-results",children:[],level:3}],level:2},{value:"Connecting to a custom QA-Board instance",id:"connecting-to-a-custom-qa-board-instance",children:[],level:2}],u={toc:d};function m(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"cli-flags-worth-knowing"},"CLI flags worth knowing"),(0,r.kt)("h2",{id:"qa---help"},(0,r.kt)("inlineCode",{parentName:"h2"},"qa --help")),(0,r.kt)("p",null,"All commands have some help:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"qa --help\nqa batch --help\n")),(0,r.kt)("h2",{id:"qa---share"},(0,r.kt)("inlineCode",{parentName:"h2"},"qa --share")),(0,r.kt)("p",null,"When you run ",(0,r.kt)("inlineCode",{parentName:"p"},"qa batch")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"qa run")," on your terminal, results are saved locally under ",(0,r.kt)("strong",{parentName:"p"},"output/"),", and ",(0,r.kt)("em",{parentName:"p"},"they are not visible in QA-Board"),". To make them visible:"),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you don't like this default, make ",(0,r.kt)("inlineCode",{parentName:"p"},"--share")," the default via  "),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# .bashrc or other shell config\nalias qa="qa --share"\n\n# you can also use an environment variable\nexport QA_SHARE=true\n')))),(0,r.kt)("h2",{id:"qa---dryrun"},(0,r.kt)("inlineCode",{parentName:"h2"},"qa --dryrun")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"qa")," commmands support a ",(0,r.kt)("inlineCode",{parentName:"p"},"--dryrun")," mode, where they print actions they would take, but don't actually do anything. In particular it helps see quickly what inputs you defined in a batch:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"qa --dryrun batch my-batch\n# qa run --input image/A.jpg\n# qa run --input image/B.jpg\n")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"For ",(0,r.kt)("inlineCode",{parentName:"p"},"qa --dryrun run"),", you are expected to handle ",(0,r.kt)("inlineCode",{parentName:"p"},"if context.dryrun: ...")," yourself in ",(0,r.kt)("inlineCode",{parentName:"p"},"run()"),". The use-case is usually printing how you would call an executable, for debugging."))),(0,r.kt)("h2",{id:"qa---label-my-label"},(0,r.kt)("inlineCode",{parentName:"h2"},"qa --label my-label")),(0,r.kt)("p",null,"Everytime you ",(0,r.kt)("inlineCode",{parentName:"p"},"qa run"),", it erases previous results. So if you want compare different versions by tweaking doing ",(0,r.kt)("inlineCode",{parentName:"p"},"qa run"),", it won't work. Fortunately, ",(0,r.kt)("inlineCode",{parentName:"p"},"qa"),' lets you give a "label", or "experiment name" to runs. Results with different labels are stored separately:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"qa --label without-optimizations batch validation-images\nqa --label    with-optimizations batch validation-images\n")),(0,r.kt)("img",{alt:"select-batch",src:(0,o.Z)("img/select-batch.png")}),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"To keep previous output files, use ",(0,r.kt)("inlineCode",{parentName:"p"},"qa batch/run --keep-previous")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"EXPORT QA_KEEP_PREVIOUS=true"),". It can be useful if you are debugging long runs and implemented a caching mecanism. ",(0,r.kt)("em",{parentName:"p"},"(Experimental)")))),(0,r.kt)("h2",{id:"qa-batch"},(0,r.kt)("inlineCode",{parentName:"h2"},"qa batch")),(0,r.kt)("h3",{id:"batch-runners"},"Batch Runners"),(0,r.kt)("p",null,"While ",(0,r.kt)("inlineCode",{parentName:"p"},"qa run")," uses the local environment, ",(0,r.kt)("inlineCode",{parentName:"p"},"qa batch"),' will offload computation to a "runner" backend.'),(0,r.kt)("p",null,"Currently:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"On Windows we use ",(0,r.kt)("a",{parentName:"li",href:"http://joblib.readthedocs.io/"},(0,r.kt)("inlineCode",{parentName:"a"},"joblib"))," for parallel computing. You can set the concurrency with ",(0,r.kt)("inlineCode",{parentName:"li"},"QATOOLS_BATCH_CONCURRENCY")," and ",(0,r.kt)("a",{parentName:"li",href:"https://joblib.readthedocs.io/en/latest/parallel.html"},"other environment variables")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"joblib"),". ",(0,r.kt)("inlineCode",{parentName:"li"},"runners.local.concurrency")," in ",(0,r.kt)("em",{parentName:"li"},"qaboard.yaml")," also works..."),(0,r.kt)("li",{parentName:"ul"},"On linux we use SIRC's LSF cluster")),(0,r.kt)("p",null,"You can also set the runner via ",(0,r.kt)("inlineCode",{parentName:"p"},"--runner=local"),", and even set a default with ",(0,r.kt)("inlineCode",{parentName:"p"},"runners.default: local")," in ",(0,r.kt)("em",{parentName:"p"},"qaboard.yaml"),"."),(0,r.kt)("h3",{id:"dealing-with-existing-results"},"Dealing with existing results"),(0,r.kt)("p",null,"When you try to re-run already existing results, The behaviour of ",(0,r.kt)("inlineCode",{parentName:"p"},"qa batch")," can be changed with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--action-on-existing")," flag:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--action-on-existing=run"),": overwrite the old results (default)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"postprocess"),": only call the ",(0,r.kt)("inlineCode",{parentName:"li"},"postprocess()")," function, not ",(0,r.kt)("inlineCode",{parentName:"li"},"run()+postprocess()")," as usual. (Note: it's also provided by ",(0,r.kt)("inlineCode",{parentName:"li"},"qa postprocess"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sync"),": update the output file manifest and read metrics from ",(0,r.kt)("em",{parentName:"li"},"$output_dir/metrics.json"),". (Note: it's also provided by ",(0,r.kt)("inlineCode",{parentName:"li"},"qa sync"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"skip"),": do nothing")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"connecting-to-a-custom-qa-board-instance"},"Connecting to a custom QA-Board instance"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"qa --offline")," to ensure you don't connect to a QA-Board instance. It's useful if... you don't have one (?).\nThe default connection settings can be overriden by environment variables. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export QABOARD_DB_PROTOCOL=http\nexport QABOARD_DB_HOST=qa\nexport QABOARD_DB_PORT=5000\n")))}m.isMDXComponent=!0}}]);