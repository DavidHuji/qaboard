"use strict";(self.webpackChunkApache_2_0=self.webpackChunkApache_2_0||[]).push([[4829],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),l=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),f=l(t),m=i,d=f["".concat(s,".").concat(m)]||f[m]||p[m]||o;return t?a.createElement(d,r(r({ref:n},u),{},{components:t})):a.createElement(d,r({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=f;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,r[1]=c;for(var l=2;l<o;l++)r[l]=t[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},9454:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return f}});var a=t(7462),i=t(3366),o=(t(7294),t(3905)),r=["components"],c={id:"specifying-configurations",sidebar_label:"Configurations",title:"Specifying configurations"},s=void 0,l={unversionedId:"specifying-configurations",id:"specifying-configurations",title:"Specifying configurations",description:"You will want to run code on the same inputs with different configuration. Depending on your field, it could be:",source:"@site/docs/specifying-configurations.md",sourceDirName:".",slug:"/specifying-configurations",permalink:"/qaboard/docs/specifying-configurations",editUrl:"https://github.com/Samsung/qaboard/edit/master/website/docs/docs/specifying-configurations.md",tags:[],version:"current",frontMatter:{id:"specifying-configurations",sidebar_label:"Configurations",title:"Specifying configurations"},sidebar:"docs",previous:{title:"Metrics",permalink:"/qaboard/docs/computing-quantitative-metrics"},next:{title:"Visualizations",permalink:"/qaboard/docs/visualizations"}},u=[{value:"Specifying configurations",id:"specifying-configurations",children:[],level:2},{value:"Common meaning for configurations",id:"common-meaning-for-configurations",children:[{value:"Use-case #1: Running Python code",id:"use-case-1-running-python-code",children:[],level:3},{value:"Use-case #2: Running an executable",id:"use-case-2-running-an-executable",children:[],level:3}],level:2},{value:"&quot;Magic&quot; configurations",id:"magic-configurations",children:[],level:2}],p={toc:u};function f(e){var n=e.components,t=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You will want to run code on the same inputs with different configuration. Depending on your field, it could be:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"enabling a debug/verbose mode"),(0,o.kt)("li",{parentName:"ul"},"using a debug/release build"),(0,o.kt)("li",{parentName:"ul"},"providing various hyperparameters"),(0,o.kt)("li",{parentName:"ul"},"forward CLI flags for an executable"),(0,o.kt)("li",{parentName:"ul"},"load registers values"),(0,o.kt)("li",{parentName:"ul"},"read configuration from files"),(0,o.kt)("li",{parentName:"ul"},"etc.")),(0,o.kt)("p",null,"There is a huge variety of configuration formats and needs. Hence, QA-Board is not very opiniated. The ",(0,o.kt)("inlineCode",{parentName:"p"},"run(context)")," function will provide a list of configurations in ",(0,o.kt)("inlineCode",{parentName:"p"},"context.configs"),". Configurations defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"[]"),", or to the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"inputs.configs")," in ",(0,o.kt)("em",{parentName:"p"},"qaboard.yaml"),"."),(0,o.kt)("h2",{id:"specifying-configurations"},"Specifying configurations"),(0,o.kt)("p",null,"You can specify configurations on the CLI:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"qa --config low-power run --input my/test\n#=> ctx.configs = ['low-power']\nqa --config base:delta run --input my/test\n#=> ctx.configs = ['base', 'delta']\n\nqa --config base --config delta run --input my/test\n#=> ctx.configs = ['base', 'delta']\n")),(0,o.kt)("p",null,"Users often use batches to make it easier:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'{5-7} title="qa/batches.yaml"',"{5-7}":!0,title:'"qa/batches.yaml"'},"my-batch:\n  inputs:\n  - A.jpg\n  configs:\n  - base\n  - delta\n\n# $ qa batch my-batch\n# => qa --config base:delta run A.jpg\n# => qa --config base:delta run B.jpg\n")),(0,o.kt)("h2",{id:"common-meaning-for-configurations"},"Common meaning for configurations"),(0,o.kt)("p",null,"QA-Board is not opiniated. Projects usually consider that each configuration in ",(0,o.kt)("inlineCode",{parentName:"p"},"ctx.configs")," is meant to be merged with ones before:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"configs:\n- base                     # load from a file, e.g. ./configs/{base}.yaml, kept in source control\n- /abs/path/to/config.yaml # overwrite with info from an absolute path\n- key: value               # give directly parameters...\n- section:\n    key2: value2\n")),(0,o.kt)("p",null,"You are free to pick different conventions."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},'Many project just want to use "parameters" and don\'t need an array of "delta/cascading/incremental" configs... To make it easier QA-Board also provides ',(0,o.kt)("inlineCode",{parentName:"p"},"context.params"),", a merge of all the ",(0,o.kt)("inlineCode",{parentName:"p"},"dict"),"s in ",(0,o.kt)("inlineCode",{parentName:"p"},"context.configs"),"."))),(0,o.kt)("h3",{id:"use-case-1-running-python-code"},"Use-case #1: Running Python code"),(0,o.kt)("p",null,"If you don't have a lot of parameters you can do something like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="qa/main.py"',title:'"qa/main.py"'},"from pathlib import Path\nimport yaml\n\ndef run(context):\n    return your_code(\n        input=context.input_path,\n        output=context.output_dir,\n        parameters=context.params,\n    )\n")),(0,o.kt)("p",null,"But if you deal with long config files, consider using ",(0,o.kt)("inlineCode",{parentName:"p"},"str"),"s in ",(0,o.kt)("inlineCode",{parentName:"p"},"context.configs")," to specify files to be loaded:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="qa/main.py"',title:'"qa/main.py"'},"def run(context):\n    parameters = {}\n    for c in context.configs:\n      if isinstance(c, str): # Load from a file.\n         # Supports absolute paths and paths relative to \"./configs\"\n         config_path = Path('configs') / c if not c.exists() else c\n         with config_path.open() as f:\n             new_parameters = yaml.load(f)\n      if isinstance(c, dict):\n          new_parameters = c\n      parameters.update(new_parameters) \n\n    return my_custom_run(\n        input=context.input_path,\n        output=context.output_dir,\n        parameters=parameters\n    )\n")),(0,o.kt)("h3",{id:"use-case-2-running-an-executable"},"Use-case #2: Running an executable"),(0,o.kt)("p",null,"It could work as before with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'"qa/main.py"','"qa/main.py"':!0},"import json\n\ndef run(context):\n    config_path = context.output_dir / \"config.json\" \n    with config_path.open('w') as f:\n        json.dump(context.params, f)\n\n    # --snip--\n    command = [\n        'build/executable',\n        \"--input\", str(context.input_path),\n        \"--output\", str(context.output_dir),\n        '--configuration', str(config_path),\n    ]\n")),(0,o.kt)("h2",{id:"magic-configurations"},'"Magic" configurations'),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Environment variables:"),": if ",(0,o.kt)("inlineCode",{parentName:"li"},"context.params")," has a key named ",(0,o.kt)("inlineCode",{parentName:"li"},"ENV")," with e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},'{"ENV": {"key": "value"}}'),", then before the run ",(0,o.kt)("inlineCode",{parentName:"li"},"key=value")," will be applied as environment variable.")))}f.isMDXComponent=!0}}]);