(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{118:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function b(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=r.a.createContext({}),s=function(e){var t=r.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=s(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),p=s(a),d=n,m=p["".concat(l,".").concat(d)]||p[d]||u[d]||i;return a?r.a.createElement(m,o(o({ref:t},c),{},{components:a})):r.a.createElement(m,o({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var b in t)hasOwnProperty.call(t,b)&&(o[b]=t[b]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var c=2;c<i;c++)l[c]=a[c];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},119:function(e,t,a){"use strict";var n=a(0),r=a(18);t.a=function(){var e=Object(n.useContext)(r.a);if(null===e)throw new Error("Docusaurus context not provided");return e}},120:function(e,t,a){"use strict";a.d(t,"b",(function(){return i})),a.d(t,"a",(function(){return l}));var n=a(119),r=a(121);function i(){var e=Object(n.a)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,a=void 0===t?"/":t,i=e.url;return{withBaseUrl:function(e,t){return function(e,t,a,n){var i=void 0===n?{}:n,l=i.forcePrependBaseUrl,o=void 0!==l&&l,b=i.absolute,c=void 0!==b&&b;if(!a)return a;if(a.startsWith("#"))return a;if(Object(r.b)(a))return a;if(o)return t+a;var s=!a.startsWith(t)?t+a.replace(/^\//,""):a;return c?e+s:s}(i,a,e,t)}}}function l(e,t){return void 0===t&&(t={}),(0,i().withBaseUrl)(e,t)}},121:function(e,t,a){"use strict";function n(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!n(e)}a.d(t,"b",(function(){return n})),a.d(t,"a",(function(){return r}))},85:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return b})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return p}));var n=a(2),r=a(6),i=(a(0),a(118)),l=a(120),o={id:"visualizations",title:"Visualizing your algorithm's outputs",sidebar_label:"Visualizations"},b={unversionedId:"visualizations",id:"visualizations",isDocsHomePage:!1,title:"Visualizing your algorithm's outputs",description:"The run()function wrapping your code receives an output_directory where it can create all kinds of files. Usually, you only want to look at a few of those files, the rest being debug data. Visualizations help you declare pre-sets of relevant files.",source:"@site/docs/visualizations.md",permalink:"/qaboard/docs/visualizations",editUrl:"https://github.com/Samsung/qaboard/edit/master/website/docs/visualizations.md",sidebar_label:"Visualizations",sidebar:"docs",previous:{title:"Specifying configurations",permalink:"/qaboard/docs/specifying-configurations"},next:{title:"Batches of inputs",permalink:"/qaboard/docs/batches-running-on-multiple-inputs"}},c=[{value:"Available file viewers",id:"available-file-viewers",children:[{value:"Image viewer",id:"image-viewer",children:[]},{value:"Plot.ly viewer",id:"plotly-viewer",children:[]},{value:"Text Viewer",id:"text-viewer",children:[]},{value:"Flame Graphs",id:"flame-graphs",children:[]},{value:"More Viewers?",id:"more-viewers",children:[]}]},{value:"Dynamic visualizations",id:"dynamic-visualizations",children:[]},{value:"Advanced Options EXPERIMENTAL",id:"advanced-options-experimental",children:[{value:"Custom Styles",id:"custom-styles",children:[]},{value:"Viewer Configuration",id:"viewer-configuration",children:[]}]}],s={rightToc:c};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"run()"),"function wrapping your code receives an ",Object(i.b)("inlineCode",{parentName:"p"},"output_directory")," where it can create all kinds of files. Usually, you only want to look at a few of those files, the rest being debug data. ",Object(i.b)("strong",{parentName:"p"},"Visualizations")," help you declare pre-sets of relevant files. "),Object(i.b)("p",null,"Here is a simple example, assuming your code an image named ",Object(i.b)("em",{parentName:"p"},"output.jpg"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="qaboard.yaml"',title:'"qaboard.yaml"'}),"outputs:\n    visualizations:\n    - path: output.jpg\n")),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"For now, to debug your visualizations, you have to commit and push your new ",Object(i.b)("em",{parentName:"p"},"qaboard.yaml"),".\nWe plan on letting you edit simply ",Object(i.b)("em",{parentName:"p"},"qaboard.yaml")," locally, and update the visualizations when you use ",Object(i.b)("inlineCode",{parentName:"p"},"qa --share"),"."))),Object(i.b)("p",null,"You can provide multiple relevant files, and hide debug visualizations by default: "),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'{5-6} title="qaboard.yaml"',"{5-6}":!0,title:'"qaboard.yaml"'}),"outputs:\n    visualizations:\n    - path: output.jpg\n    - path: debug.jpg\n      default_hidden: true\n      # type: image/jpg # auto-guessed\n")),Object(i.b)("p",null,"Users will get switches to toggle debug visualizations:"),Object(i.b)("img",{alt:"toggle visualizations",src:Object(l.a)("img/hidden_by_default_switches.png")}),Object(i.b)("h2",{id:"available-file-viewers"},"Available file viewers"),Object(i.b)("p",null,"QA-Board tries to guess the right image viewer depending on the file extension or a ",Object(i.b)("inlineCode",{parentName:"p"},"type")),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"File"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Viewer Type"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Viewer"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"*.jpg*"),", ",Object(i.b)("inlineCode",{parentName:"td"},"*.png*"),", ",Object(i.b)("inlineCode",{parentName:"td"},"*.bmp*"),", ",Object(i.b)("inlineCode",{parentName:"td"},"*.tif*"),", ",Object(i.b)("inlineCode",{parentName:"td"},"*.pdf*"),"..."),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"image/*")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Image"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"*.plotly.json")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"plotly/json")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Plot.ly"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"*.flame.json")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"flame/json")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",Object(n.a)({parentName:"strong"},{href:"http://www.brendangregg.com/flamegraphs.html"}),"Flame Graph")),", ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"http://www.brendangregg.com/blog/2014-11-09/differential-flame-graphs.html"}),"diffable"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"*.html")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"plain/html")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"HTML")," (assumes trusted input..!)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"*.mp4")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"video/*")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Video")," (synced)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"*.txt"),", unidentified"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"text/plain*")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Text")," (diffs, with VSCode's ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"https://microsoft.github.io/monaco-editor/"}),"Monaco Editor"),")")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"pointcloud/txt")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"pointcloud")," viewer (needs to be refactored, coupled to a specific internal project...)"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"6dof/txt")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"6DoF")," viewer (needs to be refactored, coupled to a specific internal project...)"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}))))),Object(i.b)("h3",{id:"image-viewer"},"Image viewer"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Supports all common image formats."),Object(i.b)("li",{parentName:"ul"},"Fast and smooth zoom & pan, synced. Fast image streaming via ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://iiif.io"}),"IIIF"),"."),Object(i.b)("li",{parentName:"ul"},"Perceptual color difference."),Object(i.b)("li",{parentName:"ul"},"Color tooltip."),Object(i.b)("li",{parentName:"ul"},"Image filters (exposure, contrast, gamma...)."),Object(i.b)("li",{parentName:"ul"},"Histograms per channel."),Object(i.b)("li",{parentName:"ul"},"Automatic regions of interest.")),Object(i.b)("img",{alt:"Image viewer",src:Object(l.a)("img/image-viewer-autoroi.png")}),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"If your configurations or ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"metadata-integration-external-databases"}),"input metadata")," contain ",Object(i.b)("inlineCode",{parentName:"p"},"roi: [{x, y, w, h, label}]"),', those "regions of interest" will be displayed and easily selectable.'))),Object(i.b)("h3",{id:"plotly-viewer"},"Plot.ly viewer"),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://plot.ly/graphing-libraries/"}),"The Plotly library")," has everything you need from bar charts to 3d plots."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"huge variety of plots"),Object(i.b)("li",{parentName:"ul"},"interactive plots"),Object(i.b)("li",{parentName:"ul"},"easy-ish to use with binding to ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://plot.ly/python/getting-started/"}),"python"),"/JS/matlab..."),Object(i.b)("li",{parentName:"ul"},"web-based"),Object(i.b)("li",{parentName:"ul"},"open-source and popular"),Object(i.b)("li",{parentName:"ul"},"performant")),Object(i.b)("img",{alt:"plotly gallery",src:Object(l.a)("img/plotly-1.png")}),Object(i.b)("img",{alt:"3d plot with plotly for LSF/Calibration",src:Object(l.a)("img/plotly-3d-example.png")}),Object(i.b)("p",null,"All you need is to save your plot data as JSON. "),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"import plotly.graph_objects as go\nfig = go.Figure(data=go.Bar(y=[2, 3, 1]))\nwith open('graph.plotly.json', 'w') as f:\n  spec = fig.to_json() # '{\"layout\": {...}, \"data\": [{...}, {...}, ...]}'\n  f.write()\n")),Object(i.b)("h3",{id:"text-viewer"},"Text Viewer"),Object(i.b)("img",{alt:"Text/diff viewer",src:Object(l.a)("img/text-viewer.jpg")}),Object(i.b)("h3",{id:"flame-graphs"},"Flame Graphs"),Object(i.b)("p",null,"We love Brendan Gregg's ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"http://www.brendangregg.com/flamegraphs.html"}),"flame charts")," and integrated Martin Spier's ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/spiermar/d3-flame-graph"}),Object(i.b)("inlineCode",{parentName:"a"},"d3-flame-graph")),". At a glance, you can check where you code spends its CPU cycles, and use ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"(http://www.brendangregg.com/blog/2014-11-09/differential-flame-graphs.html)"}),"differential flame graphs")," to debug regressions."),Object(i.b)("img",{alt:"flame graphs viewer",src:Object(l.a)("img/slides/flame-graphs.jpg")}),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"For a tutorial ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://samsung.github.io/qaboard/blog/2020/06/24/flame-graphs"}),"read our blog post"),".")),Object(i.b)("h3",{id:"more-viewers"},"More Viewers?"),Object(i.b)("p",null,"Tell us what you need! The next we'll implement is likely ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://vega.github.io/vega/"}),Object(i.b)("strong",{parentName:"a"},"vega"))," specs. It would notably allow us to display ",Object(i.b)("inlineCode",{parentName:"p"},"altair")," visualizations. We could also have a minimal integration with notebooks, ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/facebookresearch/visdom"}),"visdom"),", ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://webviz.io/"}),"webiz"),"..."),Object(i.b)("h2",{id:"dynamic-visualizations"},"Dynamic visualizations"),Object(i.b)("p",null,"You can use a ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/pillarjs/path-to-regexp"}),"special syntax")," to create dynamic visualizations at display-time. Users will we able to choose what to display using sliders / select options:"),Object(i.b)("img",{alt:"Viewing each frame of a movie",src:Object(l.a)("img/dynamic-outputs.gif")}),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'{5,7} title="qaboard.yaml"',"{5,7}":!0,title:'"qaboard.yaml"'}),'outputs:\n    visualizations:\n    - name: Movie Frames\n      # you can use the `/user/:name` syntax to match part of filenames\n      path: ":frame/output.jpg"\n      # you can match part of filenames (experimental)\n      path: ":frame/frame_:number.jpg"\n\n      # For more examples, the full syntax is available at:\n      # https://github.com/pillarjs/path-to-regexp\n\n')),Object(i.b)("p",null,"You can also use regular expressions ",Object(i.b)("strong",{parentName:"p"},"(inside parentheses!)")," to match which output files you want to view:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:"{4,6,8}","{4,6,8}":!0}),'outputs:\n    visualizations:\n      # A common use case is matching file extensions\n      path: "(.*\\.jpg)"\n      # ... or parts of filenames\n      path: "(debug_.*\\.jpg)"\n      # you can mix with the previous syntax\n      path: ":frame/(.*\\.txt)"\n\n      # If you use regular expressions, we aware that:\n      # - You MUST use "( )" aka "capture groups" !\n      # - While you can often get away "(.*)/output.jpg", in many cases you\'d want "([^/]*)/output.jpg"\n      # - Parts of paths matched via regular expressions are not synced with other outputs. Prefer the ":name" syntax\n      #   Eg if you ask also to visualize "(.*)/debug_output.jpg" and "(.*)/output.jpg"\n      #   you will get two select inputs for the frame.\n')),Object(i.b)("p",null,"By default, only one viewer/path is shown at a time, and you get sliders/select to decide what to show:"),Object(i.b)("img",{alt:"Everything is synced",src:Object(l.a)("img/dynamic-outputs-select.gif")}),Object(i.b)("p",null,"If you want, you can visualize all matching files:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:"{5-7}","{5-7}":!0}),'   # --snip--\n    - name: KPI reports\n      path: "reports/:report"\n      type: plotly/json\n      display: single  # (default): will list views one after the other\n             # all     # will render all matching paths/views\n             # viewer  # let the viewer decide what to do... (EXPERIMENTAL)\n')),Object(i.b)("h2",{id:"advanced-options-experimental"},"Advanced Options ","[EXPERIMENTAL]"),Object(i.b)("h3",{id:"custom-styles"},"Custom Styles"),Object(i.b)("p",null,"You can style your visualizations:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:"{3-7,10-12}","{3-7,10-12}":!0}),"outputs:\n    # define global or per-view styles\n    style:\n        # use any CSS properties\n        width: 500px\n        # the style will be applied to the outer-container\n        # and passed down to the viewers\n    detailed_views:\n    - name: My debug visualization\n      style:\n        width: 400px   \n")),Object(i.b)("h3",{id:"viewer-configuration"},"Viewer Configuration"),Object(i.b)("p",null,"Some viewers can read extra configuration parameters from their configuration: "),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:"{5}","{5}":!0}),"outputs:\n    detailed_views:\n    - name: My SLAM plot\n      type: 6dof/txt\n      show_3d: true\n")),Object(i.b)("p",null,'You can specify those parameters at "display-time" by defining controls:'),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:"{2-7}","{2-7}":!0}),"outputs:\n  controls:\n    - type: toggle\n      label: Debug\n      name: show_debug\n      default: false\n")))}p.isMDXComponent=!0}}]);