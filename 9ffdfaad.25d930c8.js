(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{118:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return d}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},b=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=p(a),u=n,d=b["".concat(i,".").concat(u)]||b[u]||m[u]||o;return a?r.a.createElement(d,l(l({ref:t},s),{},{components:a})):r.a.createElement(d,l({ref:t},s))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},119:function(e,t,a){"use strict";var n=a(0),r=a(18);t.a=function(){var e=Object(n.useContext)(r.a);if(null===e)throw new Error("Docusaurus context not provided");return e}},120:function(e,t,a){"use strict";a.d(t,"b",(function(){return o})),a.d(t,"a",(function(){return i}));var n=a(119),r=a(121);function o(){var e=Object(n.a)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,a=void 0===t?"/":t,o=e.url;return{withBaseUrl:function(e,t){return function(e,t,a,n){var o=void 0===n?{}:n,i=o.forcePrependBaseUrl,l=void 0!==i&&i,c=o.absolute,s=void 0!==c&&c;if(!a)return a;if(a.startsWith("#"))return a;if(Object(r.b)(a))return a;if(l)return t+a;var p=!a.startsWith(t)?t+a.replace(/^\//,""):a;return s?e+p:p}(o,a,e,t)}}}function i(e,t){return void 0===t&&(t={}),(0,o().withBaseUrl)(e,t)}},121:function(e,t,a){"use strict";function n(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!n(e)}a.d(t,"b",(function(){return n})),a.d(t,"a",(function(){return r}))},92:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return b}));var n=a(2),r=a(6),o=(a(0),a(118)),i=a(120),l={title:"Creating and viewing flame graphs with QA-Board",author:"Arthur Flam",author_url:"https://shapescience.xyz/",author_title:"Algo engineering at Samsung",author_image_url:"https://media-exp1.licdn.com/dms/image/C4D03AQFO_tBlzPZ4ug/profile-displayphoto-shrink_400_400/0?e=1602720000&v=beta&t=35CS2a0jRg32mhVbwpqbddP8HJsFp75hLeQJjAHQHCw",tags:["performance","engineering","visualization"],image:"https://samsung.github.io/qaboard/img/slides/flame-graphs.jpg"},c={permalink:"/qaboard/blog/2020/06/24/flame-graphs",source:"@site/blog/2020-06-24-flame-graphs.md",description:"Many tools exist to investigate software performance. QA-Board can now use flame graphs to help identify bottlenecks, and pointpoint why regressions happened thanks to differential frame graphs.",date:"2020-06-24T00:00:00.000Z",tags:[{label:"performance",permalink:"/qaboard/blog/tags/performance"},{label:"engineering",permalink:"/qaboard/blog/tags/engineering"},{label:"visualization",permalink:"/qaboard/blog/tags/visualization"}],title:"Creating and viewing flame graphs with QA-Board",readingTime:3.135,truncated:!0,prevItem:{title:"Introducing QA-Board",permalink:"/qaboard/blog/2020/08/10/introducing-QA-Board"}},s=[{value:"System requirements",id:"system-requirements",children:[]},{value:"Requirements for C/C++",id:"requirements-for-cc",children:[]},{value:"Using <code>perf</code> to instrument a command",id:"using-perf-to-instrument-a-command",children:[]},{value:"Flame graphs at last!",id:"flame-graphs-at-last",children:[]},{value:"Visualizing flame graphs in QA-Board",id:"visualizing-flame-graphs-in-qa-board",children:[]}],p={rightToc:s};function b(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://netflixtechblog.com/linux-performance-analysis-in-60-000-milliseconds-accc10403c55"}),"Many tools")," exist to investigate software performance. QA-Board can now use flame graphs to help identify bottlenecks, and pointpoint why regressions happened thanks to differential frame graphs."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"If you are not familiar with flame graphs ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://www.brendangregg.com/flamegraphs.html"}),"read this"),"!")),Object(o.b)("h2",{id:"system-requirements"},"System requirements"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Install ",Object(o.b)("inlineCode",{parentName:"li"},"perf"),".")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"# debian\nsudo apt-get install -y linux-tools-generic linux-tools-$(uname -r)\n# maybe also            linux-tools-common\n\n# from source\ngit clone https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git\ncd linux/tools/perf\nmake\n\n# install somewhere in your PATH\ncp perf /somewhere/bin\n")),Object(o.b)("ol",{start:2},Object(o.b)("li",{parentName:"ol"},"Install ",Object(o.b)("inlineCode",{parentName:"li"},"FlameGraph"),". It turns ",Object(o.b)("inlineCode",{parentName:"li"},"perf")," recording into flame graphs:")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"git clone https://github.com/brendangregg/FlameGraph\ncd FlameGraph\n\n# make the scripts accessible easily\nexport PATH=$(pwd):$PATH\n")),Object(o.b)("ol",{start:3},Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"burn")," transforms the output from ",Object(o.b)("inlineCode",{parentName:"li"},"FlameGraph"),' into a "portable" json.')),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),'# other options at https://github.com/spiermar/burn#getting-started\ncurl -L "https://dl.bintray.com/mspier/binaries/burn/1.0.1/linux/amd64/burn" -o burn\nchmod +x burn\n\n# install somewhere in your PATH\ncp burn /somewhere/bin\n')),Object(o.b)("h2",{id:"requirements-for-cc"},"Requirements for C/C++"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Your program needs to be compiled with symbols (",Object(o.b)("inlineCode",{parentName:"li"},"gcc -g"),", otherwise, have fun making sense of the adresses). If your're not sure call ",Object(o.b)("inlineCode",{parentName:"li"},"file your-binary"),",  it will tell you:")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"$ file my-binary\nmy-binary: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, for GNU/Linux 2.6.32, with debug_info, not stripped\n")),Object(o.b)("ol",{start:2},Object(o.b)("li",{parentName:"ol"},"Ideally, compile with ",Object(o.b)("inlineCode",{parentName:"li"},"gcc -fno-omit-frame-pointer")," as frame pointers help create good stack traces. If you can't do it, ",Object(o.b)("inlineCode",{parentName:"li"},"perf --call-graph dwarf")," or ",Object(o.b)("inlineCode",{parentName:"li"},"perf --call-graph lbr")," ",Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"http://www.brendangregg.com/perf.html"}),"may be workarounds"),"...")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"It's also possible to build flame graphs for java, node...")),Object(o.b)("h2",{id:"using-perf-to-instrument-a-command"},"Using ",Object(o.b)("inlineCode",{parentName:"h2"},"perf")," to instrument a command"),Object(o.b)("p",null,"Read this ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://www.brendangregg.com/perf.html"}),"article by Brendan Gregg")," to get an overview of ",Object(o.b)("inlineCode",{parentName:"p"},"perf"),"'s many uses and commands.\nTo profile a command:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"perf record -F 99 -ag -- your-command\n# -a: all CPUs\n# -g: capture call graphs (stack traces)\n# -F99: sample at 99 Hertz\n\n# view a report with\nperf report\n")),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},Object(o.b)("inlineCode",{parentName:"p"},"perf")," may warn about you not having permissions to collect stats from the kernel. If it happens, either run as root with ",Object(o.b)("inlineCode",{parentName:"p"},"sudo")," or follow the instructions, likely involving ",Object(o.b)("inlineCode",{parentName:"p"},"CAP_SYS_ADMIN")," permissions for your users, and a ",Object(o.b)("inlineCode",{parentName:"p"},"<=2")," policy in ",Object(o.b)("em",{parentName:"p"},"/proc/sys/kernel/perf_event_paranoid"),"..."))),Object(o.b)("p",null,Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.man7.org/linux/man-pages/man1/perf-record.1.html"}),"Read the docs")," to tweak profiles to your use case."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"As-is, ",Object(o.b)("inlineCode",{parentName:"p"},"perf"),"'s reports are great. The issue is that if you're investigating multiple feature flags, compilation options or code versions, you need a way to organize all this data. And obviously still have good investigation and debugging tools. That's the promise of ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://samsung.github.io/qaboard"}),"QA-Board"),"!")),Object(o.b)("h2",{id:"flame-graphs-at-last"},"Flame graphs at last!"),Object(o.b)("p",null,"Create a flame graph involves lots of format conversion. You can create an SVG flame graph:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"# use a text-based format for the perf recordings\nperf script > out.perf\n\n# this format makes filtering super-easy\nstackcollapse-perf.pl out.perf > out.perf-folded\n\n# create an SVG plot, already viewable\nflamegraph.pl out.perf-folded > perf.svg\n")),Object(o.b)("p",null,"If you only care about some functions (e.g. what's under your ",Object(o.b)("inlineCode",{parentName:"p"},"main()"),"), you can filter:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"cat out.perf-folded \\\n  # our software has a bunch of irrelevant setup code\n  | grep 'CCDECmdLineSim::RunChain' \\\n  # remove common frame prefixes\n  | sed 's/;\\[unknown\\];__libc_start_main;main;CCDECmdLineSim::Run//g' \\\n  | tee out.filtered.perf-folded \\\n  # tons of options.. https://github.com/brendangregg/FlameGraph#options\n  | flamegraph.pl --color hot --hash --cp \\\n  > perf.svg\n\n# cleanup\nrm out.perf out.perf-folded\n")),Object(o.b)("p",null,'QA-Board\'s viewer needs a more "portable" format, not an "finished" SVG:'),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"burn convert --type=folded out.filtered.perf-folded --output=perf.flame.json\n")),Object(o.b)("h2",{id:"visualizing-flame-graphs-in-qa-board"},"Visualizing flame graphs in QA-Board"),Object(o.b)("p",null,"QA-Board integrates Martin Spier's ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/spiermar/d3-flame-graph"}),Object(o.b)("inlineCode",{parentName:"a"},"d3-flame-graph")),". At a glance, you can check where you code spends its CPU cycles, and use ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"(http://www.brendangregg.com/blog/2014-11-09/differential-flame-graphs.html)"}),"differential flame graphs")," to debug regressions. What do you need to do?"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Wrap calls to ",Object(o.b)("inlineCode",{parentName:"li"},"perf")," & cie in your ",Object(o.b)("inlineCode",{parentName:"li"},"run()")," function:")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python",metastring:'title="qa/main.py"',title:'"qa/main.py"'}),"def run(context):\n    # run perf -- /some/binary\n    # run stackcollapse.pl && burl -o {context.output_dir}/perf.flame.json\n")),Object(o.b)("ol",{start:2},Object(o.b)("li",{parentName:"ol"},"Tell you expect to view flame graphs:\nQA-Board")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="qaboard.yaml"',title:'"qaboard.yaml"'}),"outputs:\n  visualizations:\n  - path: perf.flame.json\n")),Object(o.b)("img",{alt:"Flame graph viewer",src:Object(i.a)("img/slides/flame-graphs.jpg")}))}b.isMDXComponent=!0}}]);