<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://samsung.github.io/qaboard/blog</id>
    <title>QA-Board Blog</title>
    <updated>2020-08-10T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://samsung.github.io/qaboard/blog"/>
    <subtitle>QA-Board Blog</subtitle>
    <icon>https://samsung.github.io/qaboard/img/favicon/favicon-32x32.png</icon>
    <entry>
        <title type="html"><![CDATA[Introducing QA-Board]]></title>
        <id>/2020/08/10/introducing-QA-Board</id>
        <link href="https://samsung.github.io/qaboard/blog/2020/08/10/introducing-QA-Board"/>
        <updated>2020-08-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We are happy to introduce QA-Board (source), a run-tracker with advanced visualizations for algorithm and software engineers.]]></summary>
        <content type="html"><![CDATA[<p>We are happy to introduce <a href="https://samsung.github.io/qaboard" target="_blank" rel="noopener noreferrer">QA-Board</a> (<a href="https://github.com/samsung/qaboard" target="_blank" rel="noopener noreferrer">source</a>), a run-tracker with advanced visualizations for algorithm and software engineers.</p><p align="center"><img alt="QA-Board logo" width="400" src="https://user-images.githubusercontent.com/2649055/86829138-bb6aef00-c09c-11ea-8b59-78b7fc44ebcf.png"></p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="tracking-quality-is-hard">Tracking quality is hard<a class="hash-link" href="#tracking-quality-is-hard" title="Direct link to heading">​</a></h2><p><em>Tests are not enough</em> when the focus is quality and performance. Whether you need to improve algorithms or make performance-sensitive code more efficient, all sorts of metrics and visualizations are required. Engineers usually start this evaluation process by writing scripts or notebooks that test their solution on limited samples. They then look at the results and iterate.</p><p>While it's very convenient at first, very soon keeping track of versions or comparing features gets challenging. There are a lot of "logistics" to get right:</p><ul><li>How to share results?</li><li>What about source control and CI integration?</li><li>How to start distributed tuning experiments?</li><li>How to identify regressions?</li></ul><blockquote><p>We wanted to solve those recurrent issues with a simple solution adaptable to many projects.</p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="qa-boards-story">QA-Board's story<a class="hash-link" href="#qa-boards-story" title="Direct link to heading">​</a></h2><p>Our business unit develops IP for image sensors. What was a closely-knit 15 person team became an over-300-person organization. The complexity and pace of our projects kept growing. As you may know, Samsung is now working on image sensors with groundbreaking resolution (200MP and beyond), capable of AI and packed with innovative features, including cutting-edge image processing IPs.</p><blockquote><p><a href="https://samsung-careers.co.il/?coref=1.10.rA7_407&amp;t=1597396535199" target="_blank" rel="noopener noreferrer">We're hiring at Samsung's Israel R&amp;D Center</a> - our goal is to become the 1st image sensor manufacturer worldwide.</p></blockquote><p>As we were experiencing growing pains in our development processes, we set up an infrastructure team to change the way we work. What we emphasized were software-engineering best practices, tooling, reproducibility, and our mission to improve cross-team collaboration.</p><p>As part of our work on algorithms for our <a href="http://rpg.ifi.uzh.ch/docs/CVPR19workshop/CVPRW19_Eric_Ryu_Samsung.pdf" target="_blank" rel="noopener noreferrer">innovative DVS sensor</a>, I had created what became QA-Board. When I joined this new infrastructure team we expanded QA-Board's scope.</p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="use-cases">Use-Cases<a class="hash-link" href="#use-cases" title="Direct link to heading">​</a></h2><p>QA-Board has become a key collaborative tool. Our main use-cases are:</p><ul><li><strong>Sharing</strong> links with all the info (command, output files, logs...).</li><li><strong>Work-from-home</strong>: engineers can share 108MP+ images thanks to the <a href="https://github.com/IIIF/awesome-iiif" target="_blank" rel="noopener noreferrer">IIIF protocol</a>.</li><li><strong>Integration</strong>: links to and from git repositories and their Continuous Integration. From QA-Board, users can <a href="https://samsung.github.io/qaboard/docs/triggering-third-party-tools" target="_blank" rel="noopener noreferrer">directly access</a> build artifacts, trigger automated jobs, and when needed they can build dashboards or scripts they query QA-Board's API.</li><li><strong>Visualizations</strong>: everything can be compared, and thanks to the <a href="https://samsung.github.io/qaboard/docs/visualizations" target="_blank" rel="noopener noreferrer">many different types of visualizations</a> (images/plots/text/html/video...), users can easily create the reports they need.</li><li><strong>Tuning</strong>: QA-Board <a href="https://samsung.github.io/qaboard/docs/celery-integration" target="_blank" rel="noopener noreferrer">distributes runs</a> to our cluster. Users can easily start tuning experiments that enable feature flags or tweak parameters. We've integrated <a href="https://scikit-optimize.github.io/" target="_blank" rel="noopener noreferrer">scikit-optimize</a> for black-box optimization.</li><li><strong>Regression</strong>: users can check the progress on various metrics, and when needed, identify which commit caused a regression.</li><li><strong>Performance engineering</strong>: save <a href="https://rr-project.org/" target="_blank" rel="noopener noreferrer"><code>rr</code></a>/<a href="http://www.brendangregg.com/perf.html" target="_blank" rel="noopener noreferrer"><code>perf</code></a> recordings, view <a href="http://www.brendangregg.com/flamegraphs.html" target="_blank" rel="noopener noreferrer">flame graphs</a>, <a href="https://github.com/arthur-flam/sysbench-qaboard" target="_blank" rel="noopener noreferrer">benchmark drivers</a>, and track metrics for regressions.</li></ul><blockquote><p>Here are some screenshots (from slide 7):</p></blockquote><figure class="video-container"><iframe src="//www.slideshare.net/slideshow/embed_code/key/C3QrOdYHrRyB7d" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px;margin-bottom:5px;max-width:100%"></iframe></figure><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="whats-next">What's next?<a class="hash-link" href="#whats-next" title="Direct link to heading">​</a></h2><p>Our goal is to make QA-Board the best general-purpose run-tracker. We want to see it used for performance optimization, algorithm development, model comparaisons in operational research, web page performance tracking...</p><p>To achieve those goals, we'll need:</p><ul><li><strong>User feedback</strong>, issues and feature requests. </li><li><strong>Community contributions</strong>, for instance integrating more file viewers: e.g. support for common plot formats like vega or highcharts...</li></ul><div class="admonition admonition-note alert alert--secondary"><div class="admonition-heading"><h5><span class="admonition-icon"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>How to get in touch?</h5></div><div class="admonition-content"><p>Join our <a href="https://github.com/Samsung/qaboard/issues" target="_blank" rel="noopener noreferrer">issue tracker</a> to report bugs or suggest features, or feel free to <a href="https://spectrum.chat/qaboard" target="_blank" rel="noopener noreferrer">start a chat</a> with <a href="mailto:arthur.flam@samsung.com" target="_blank" rel="noopener noreferrer">the maintainers</a>.</p></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="how-to-get-started-using-qa-board">How to get started using QA-Board?<a class="hash-link" href="#how-to-get-started-using-qa-board" title="Direct link to heading">​</a></h2><p><a href="https://samsung.github.io/qaboard/docs/deploy" target="_blank" rel="noopener noreferrer">Head over to the docs</a>. If you run into issues contact us: we'll help you.</p>]]></content>
        <author>
            <name>Arthur Flam</name>
            <uri>https://shapescience.xyz/</uri>
        </author>
        <category label="qualityOps" term="qualityOps"/>
        <category label="engineering" term="engineering"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Creating and viewing flame graphs with QA-Board]]></title>
        <id>/2020/06/24/flame-graphs</id>
        <link href="https://samsung.github.io/qaboard/blog/2020/06/24/flame-graphs"/>
        <updated>2020-06-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Many tools exist to investigate software performance. QA-Board can now use flame graphs to help identify bottlenecks, and pointpoint why regressions happened thanks to differential frame graphs.]]></summary>
        <content type="html"><![CDATA[<p><a href="https://netflixtechblog.com/linux-performance-analysis-in-60-000-milliseconds-accc10403c55" target="_blank" rel="noopener noreferrer">Many tools</a> exist to investigate software performance. QA-Board can now use flame graphs to help identify bottlenecks, and pointpoint why regressions happened thanks to differential frame graphs.</p><blockquote><p>If you are not familiar with flame graphs <a href="http://www.brendangregg.com/flamegraphs.html" target="_blank" rel="noopener noreferrer">read this</a>!</p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="system-requirements">System requirements<a class="hash-link" href="#system-requirements" title="Direct link to heading">​</a></h2><ol><li>Install <code>perf</code>.</li></ol><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx bash"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># debian</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">apt-get</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> -y linux-tools-generic linux-tools-</span><span class="token variable" style="color:#36acaa">$(</span><span class="token variable function" style="color:#d73a49">uname</span><span class="token variable" style="color:#36acaa"> -r</span><span class="token variable" style="color:#36acaa">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># maybe also            linux-tools-common</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># from source</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> clone https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">cd</span><span class="token plain"> linux/tools/perf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">make</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># install somewhere in your PATH</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">cp</span><span class="token plain"> perf /somewhere/bin</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><ol start="2"><li>Install <code>FlameGraph</code>. It turns <code>perf</code> recording into flame graphs:</li></ol><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx bash"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> clone https://github.com/brendangregg/FlameGraph</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">cd</span><span class="token plain"> FlameGraph</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># make the scripts accessible easily</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable environment constant" style="color:#36acaa">PATH</span><span class="token operator" style="color:#393A34">=</span><span class="token variable" style="color:#36acaa">$(</span><span class="token variable builtin class-name" style="color:#36acaa">pwd</span><span class="token variable" style="color:#36acaa">)</span><span class="token builtin class-name">:</span><span class="token environment constant" style="color:#36acaa">$PATH</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><ol start="3"><li><code>burn</code> transforms the output from <code>FlameGraph</code> into a "portable" json.</li></ol><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx bash"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># other options at https://github.com/spiermar/burn#getting-started</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">curl</span><span class="token plain"> -L </span><span class="token string" style="color:#e3116c">"https://dl.bintray.com/mspier/binaries/burn/1.0.1/linux/amd64/burn"</span><span class="token plain"> -o burn</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">chmod</span><span class="token plain"> +x burn</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># install somewhere in your PATH</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">cp</span><span class="token plain"> burn /somewhere/bin</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="requirements-for-cc">Requirements for C/C++<a class="hash-link" href="#requirements-for-cc" title="Direct link to heading">​</a></h2><ol><li>Your program needs to be compiled with symbols (<code>gcc -g</code>, otherwise, have fun making sense of the adresses). If your're not sure call <code>file your-binary</code>,  it will tell you:</li></ol><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx bash"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">file</span><span class="token plain"> my-binary</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">my-binary: ELF </span><span class="token number" style="color:#36acaa">64</span><span class="token plain">-bit LSB executable, x86-64, version </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">SYSV</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">, dynamically linked, interpreter /lib64/l, </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> GNU/Linux </span><span class="token number" style="color:#36acaa">2.6</span><span class="token plain">.32, with debug_info, not stripped</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><ol start="2"><li>Ideally, compile with <code>gcc -fno-omit-frame-pointer</code> as frame pointers help create good stack traces. If you can't do it, <code>perf --call-graph dwarf</code> or <code>perf --call-graph lbr</code> <a href="http://www.brendangregg.com/perf.html" target="_blank" rel="noopener noreferrer">may be workarounds</a>...</li></ol><blockquote><p>It's also possible to build flame graphs for java, node...</p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="using-perf-to-instrument-a-command">Using <code>perf</code> to instrument a command<a class="hash-link" href="#using-perf-to-instrument-a-command" title="Direct link to heading">​</a></h2><p>Read this <a href="http://www.brendangregg.com/perf.html" target="_blank" rel="noopener noreferrer">article by Brendan Gregg</a> to get an overview of <code>perf</code>'s many uses and commands.
To profile a command:</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx bash"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">perf record -F </span><span class="token number" style="color:#36acaa">99</span><span class="token plain"> -ag -- your-command</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># -a: all CPUs</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># -g: capture call graphs (stack traces)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># -F99: sample at 99 Hertz</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># view a report with</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">perf report</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="admonition admonition-note alert alert--secondary"><div class="admonition-heading"><h5><span class="admonition-icon"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</h5></div><div class="admonition-content"><p><code>perf</code> may warn about you not having permissions to collect stats from the kernel. If it happens, either run as root with <code>sudo</code> or follow the instructions, likely involving <code>CAP_SYS_ADMIN</code> permissions for your users, and a <code>&lt;=2</code> policy in <em>/proc/sys/kernel/perf_event_paranoid</em>...</p></div></div><p><a href="https://www.man7.org/linux/man-pages/man1/perf-record.1.html" target="_blank" rel="noopener noreferrer">Read the docs</a> to tweak profiles to your use case.</p><blockquote><p>As-is, <code>perf</code>'s reports are great. The issue is that if you're investigating multiple feature flags, compilation options or code versions, you need a way to organize all this data. And obviously still have good investigation and debugging tools. That's the promise of <a href="https://samsung.github.io/qaboard" target="_blank" rel="noopener noreferrer">QA-Board</a>!</p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="flame-graphs-at-last">Flame graphs at last!<a class="hash-link" href="#flame-graphs-at-last" title="Direct link to heading">​</a></h2><p>Create a flame graph involves lots of format conversion. You can create an SVG flame graph:</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx bash"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># use a text-based format for the perf recordings</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">perf script </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> out.perf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># this format makes filtering super-easy</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">stackcollapse-perf.pl out.perf </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> out.perf-folded</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># create an SVG plot, already viewable</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">flamegraph.pl out.perf-folded </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> perf.svg</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>If you only care about some functions (e.g. what's under your <code>main()</code>), you can filter:</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx bash"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">cat</span><span class="token plain"> out.perf-folded </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># our software has a bunch of irrelevant setup code</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'CCDECmdLineSim::RunChain'</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># remove common frame prefixes</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">sed</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'s/;\[unknown\];__libc_start_main;main;CCDECmdLineSim::Run//g'</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">tee</span><span class="token plain"> out.filtered.perf-folded </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># tons of options.. https://github.com/brendangregg/FlameGraph#options</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> flamegraph.pl --color hot --hash --cp </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> perf.svg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># cleanup</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">rm</span><span class="token plain"> out.perf out.perf-folded</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>QA-Board's viewer needs a more "portable" format, not an "finished" SVG:</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx bash"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">burn convert --type</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">folded out.filtered.perf-folded --output</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">perf.flame.json</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="visualizing-flame-graphs-in-qa-board">Visualizing flame graphs in QA-Board<a class="hash-link" href="#visualizing-flame-graphs-in-qa-board" title="Direct link to heading">​</a></h2><p>QA-Board integrates Martin Spier's <a href="https://github.com/spiermar/d3-flame-graph" target="_blank" rel="noopener noreferrer"><code>d3-flame-graph</code></a>. At a glance, you can check where you code spends its CPU cycles, and use <a href="/qaboard/blog/2020/06/24/(http://www.brendangregg.com/blog/2014-11-09/differential-flame-graphs.html)">differential flame graphs</a> to debug regressions. What do you need to do?</p><ol><li>Wrap calls to <code>perf</code> &amp; cie in your <code>run()</code> function:</li></ol><div class="codeBlockContainer_I0IT language-python theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">qa/main.py</div><div class="codeBlockContent_wNvx python"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">run</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">context</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># run perf -- /some/binary</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># run stackcollapse.pl &amp;&amp; burl -o {context.output_dir}/perf.flame.json</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><ol start="2"><li>Tell you expect to view flame graphs:
QA-Board</li></ol><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">qaboard.yaml</div><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">outputs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">visualizations</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">path</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> perf.flame.json</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><img alt="Flame graph viewer" src="/qaboard/img/slides/flame-graphs.jpg"><img alt="Flame graph viewer" src="/img/slides/flame-graphs.jpg">]]></content>
        <author>
            <name>Arthur Flam</name>
            <uri>https://shapescience.xyz/</uri>
        </author>
        <category label="performance" term="performance"/>
        <category label="engineering" term="engineering"/>
        <category label="visualization" term="visualization"/>
    </entry>
</feed>