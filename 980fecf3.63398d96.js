(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{104:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return u}));var n=a(0),i=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=i.a.createContext({}),d=function(e){var t=i.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=d(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=d(a),m=n,u=p["".concat(o,".").concat(m)]||p[m]||b[m]||r;return a?i.a.createElement(u,s(s({ref:t},l),{},{components:a})):i.a.createElement(u,s({ref:t},l))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,o=new Array(r);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var l=2;l<r;l++)o[l]=a[l];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},83:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return d}));var n=a(2),i=a(6),r=(a(0),a(104)),o={id:"metadata-integration-external-databases",sidebar_label:"Metadata & External Databases",title:"Using input metadata and integrating with external databases"},s={unversionedId:"metadata-integration-external-databases",id:"metadata-integration-external-databases",isDocsHomePage:!1,title:"Using input metadata and integrating with external databases",description:"Metadata",source:"@site/docs/metadata-integration-external-databases.md",permalink:"/qaboard/docs/metadata-integration-external-databases",editUrl:"https://github.com/Samsung/qaboard/edit/master/website/docs/metadata-integration-external-databases.md",sidebar_label:"Metadata & External Databases",sidebar:"docs",previous:{title:"Bit accuracy tests",permalink:"/qaboard/docs/bit-accuracy"},next:{title:"QA-Board's API",permalink:"/qaboard/docs/apis"}},c=[{value:"Metadata",id:"metadata",children:[{value:"Using metadata to filter batches of inputs",id:"using-metadata-to-filter-batches-of-inputs",children:[]}]},{value:"Integrating with external input databases",id:"integrating-with-external-input-databases",children:[]}],l={rightToc:c};function d(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"metadata"},"Metadata"),Object(r.b)("p",null,"Input metadata are useful to:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Filter")," and ",Object(r.b)("strong",{parentName:"li"},"group")," inputs"),Object(r.b)("li",{parentName:"ul"},"Decide ",Object(r.b)("strong",{parentName:"li"},"what metrics to compute")," on your outputs")),Object(r.b)("p",null,"To enable metadata support in QA-Board, implement in your project's entrypoint a function that returns metadata as a dict. Here is an example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python",metastring:'title="qa/main.py (qaboard.yaml: project.entrypoint)"',title:'"qa/main.py',"(qaboard.yaml:":!0,'project.entrypoint)"':!0}),"import yaml\ndef metadata(absolute_input_path, database, input_path):\n  metadata_file = absolute_input_path.with_suffix('.metadata.yaml')\n  if not metadata_file.exists():\n    return {}\n  with metadata_file.open() as f:\n    return yaml.load(f, Loader=yaml.SafeLoader)\n")),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"If you define ",Object(r.b)("inlineCode",{parentName:"p"},"metadata.label")," it will be used in the UI instead of the input path."))),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"QA-Board will compares runs with different input if they have the same ",Object(r.b)("inlineCode",{parentName:"p"},"metadata.id"),". A common use-case is comparing images from different sensors taken in the same conditions."))),Object(r.b)("p",null,"QA-Board will forward metadata to your ",Object(r.b)("inlineCode",{parentName:"p"},"run()")," function as ",Object(r.b)("inlineCode",{parentName:"p"},"ctx.obj['input_metadata']"),"."),Object(r.b)("h3",{id:"using-metadata-to-filter-batches-of-inputs"},"Using metadata to filter batches of inputs"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="qa/batches.yaml"',title:'"qa/batches.yaml"'}),"inputs-filtered-using-metadata:\n  only: # only run tests matching all those conditions\n    PD pattern: 4PD\n    Model             # mulitple options are OK\n      - 2T7\n      - XXX\n    Binning: '1:*'    # wildcards are supported\n    Bad pixels: False # as well as Booleans, numbers\u2026\n    Distance: '>1'    # also >=, =,==, <, <=\n\n  exclude: # don't run on tests matching all the filters below\n    Location: Outdoor\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"qa batch inputs-filtered-using-metadata\n# => run only on inputs with 4PD as PD pattern, etc.\n")),Object(r.b)("h2",{id:"integrating-with-external-input-databases"},"Integrating with external input databases"),Object(r.b)("p",null,"Instead of relying on walking on the filesystem, you can use an external database to organize your inputs. To enable this with QA-Board, implement in your project's entrypoint a function that iterates over inputs given a query:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python",metastring:'title="qa/main.py"',title:'"qa/main.py"'}),'def iter_inputs(path, database, only, exclude, inputs_settings):\n  # TODO: Maybe here connect to an SQL database\n  #       and execute something like\n  #       f"SELECT test, metadata from tests where path LIKE {path} and database={database}"\n  # OPTIONALLY: return filtered inputs using only/exclude\n  #             even if you don\'t do it, qa-board will always re-filter\n  #             but doing it yourself in SQL can be much more efficient\n  return ({"absolute_input_path": database / p.path, "metadata": p.metadata} for p in inputs)\n\n# Note: path=None should match all inputs in the database\n# Note: inputs_settings is a dict with information on how inputs should be found: file globs, use_parent, or anything else you put in qaboard.yaml\'s inputs.\n')),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Currently, you still have to write a ",Object(r.b)("inlineCode",{parentName:"p"},"metadata()")," function for ",Object(r.b)("inlineCode",{parentName:"p"},"run()")," to receive the metadata or for QA-Board to use them in the UI."))))}d.isMDXComponent=!0}}]);