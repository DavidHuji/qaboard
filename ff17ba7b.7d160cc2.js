(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{107:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return s})),a.d(n,"metadata",(function(){return c})),a.d(n,"rightToc",(function(){return o})),a.d(n,"default",(function(){return l}));var t=a(2),i=a(6),r=(a(0),a(113)),s={id:"batches-running-on-multiple-inputs",title:"Batches of inputs",sidebar_label:"Batches of Inputs"},c={unversionedId:"batches-running-on-multiple-inputs",id:"batches-running-on-multiple-inputs",isDocsHomePage:!1,title:"Batches of inputs",description:"Make sure you read the section on input files",source:"@site/docs/batches-running-on-multiple-inputs.md",permalink:"/qaboard/docs/batches-running-on-multiple-inputs",editUrl:"https://github.com/Samsung/qaboard/edit/master/website/docs/batches-running-on-multiple-inputs.md",sidebar_label:"Batches of Inputs",sidebar:"docs",previous:{title:"Visualizing your algorithm's outputs",permalink:"/qaboard/docs/visualizations"},next:{title:"Tips for CLI usage",permalink:"/qaboard/docs/using-the-qa-cli"}},o=[{value:"Setting a custom database per batch",id:"setting-a-custom-database-per-batch",children:[]},{value:"Specifying test configurations",id:"specifying-test-configurations",children:[]},{value:"Matrix batches",id:"matrix-batches",children:[{value:"Interpolation",id:"interpolation",children:[]}]},{value:"Aliases for groups of batches",id:"aliases-for-groups-of-batches",children:[]},{value:"YAML anchors and aliases",id:"yaml-anchors-and-aliases",children:[{value:"Reusable configurations/inputs",id:"reusable-configurationsinputs",children:[]}]}],b={rightToc:o};function l(e){var n=e.components,a=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(t.a)({},b,a,{components:n,mdxType:"MDXLayout"}),Object(r.b)("div",{className:"admonition admonition-important alert alert--info"},Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(t.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(t.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"Reminder")),Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Make sure you read ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"inputs"}),"the section on input files")))),Object(r.b)("p",null,"As we discussed, you can define batches of inputs in file(s) whose paths are given by ",Object(r.b)("inlineCode",{parentName:"p"},"inputs.batches")," in your ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/Samsung/qaboard/blob/master/qaboard/sample_project/qaboard.yaml#L25"}),"qaboard.yaml")," configuration."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="qa/batches.yaml (default)"',title:'"qa/batches.yaml','(default)"':!0}),"my-batch:\n inputs:\n   - A.jpg\n   - B.jpg\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"qa batch my-batch\n#=> qa run --input A.jpg\n#=> qa run --input B.jpg\n\nqa batch --batch first-batch --batch second-batch\n")),Object(r.b)("h2",{id:"setting-a-custom-database-per-batch"},"Setting a custom database per batch"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml",metastring:"{2-4}","{2-4}":!0}),"you-can-override-the-default-database:\n  database:\n    linux: /mnt/database\n    windows: '\\\\\\\\storage\\\\database'\n  inputs:\n  - Images/Demo3/A.jpg\n  - Images/Demo2\n")),Object(r.b)("h2",{id:"specifying-test-configurations"},"Specifying test configurations"),Object(r.b)("div",{className:"admonition admonition-important alert alert--info"},Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(t.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(t.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"Reminder")),Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Make sure you read ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"identifying-inputs-files"}),"the section on configurations")))),Object(r.b)("p",null,"Let's look at examples from one of Samsung's projects to illustrate how configurations can be given. In short, each image is processed by a tool named \"CDE\". We need to feed it config files and CLI arguments."),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml",metastring:"{2-3}","{2-3}":!0}),'using-a-custom-configuration:\n  configs:\n  - base\n  inputs:\n  - Bayer/A.dng\n  - Bayer/B.dng\n# => configs == ["base"]\n# => the code would load base/config.cde\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml",metastring:"{2-4}","{2-4}":!0}),'multiple-configs:\n  configs:\n    - base\n    - low-light\n  inputs:\n  - Bayer/A.dng\n  - Bayer/B.dng\n#=> configs == ["base", "low-light"]\n#=> we merge 2 CDE configs \n')),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml",metastring:"{2-8}","{2-8}":!0}),'configs-can-be-complex-objects:\n  configs:\n    - base\n    - low-light\n    - cde:\n      - "-w 9920"\n      - "-h 2448"\n      - "-it BAYER10"\n  inputs:\n  - Bayer/A.dng\n  - Bayer/B.dng\n# configs == ["base", "low-light", {"cde": ["-w 9920", "-h 2448", "-it BAYER10"]}]\n# => Here we use the "cde" config parameter to pass CLI arguments to CDE.\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml",metastring:"{5,7-10}","{5,7-10}":!0}),'each-input-can-have-its-own-configuration:\n  configs:\n    - base\n  inputs:\n  - Bayer/A.dng:\n    #=> configs == ["base"]\n  - Bayer/B.dng:\n      - low-light\n      - cde:\n        - "-DD"\n    #=> configs == ["base", "low-light", {"cde": ["-DD"]}]\n')),Object(r.b)("h2",{id:"matrix-batches"},"Matrix batches"),Object(r.b)("p",null,'You can use "matrix" batches to run on combinations of configurations (and platfornms):'),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml",metastring:"{4-10}","{4-10}":!0}),"multiple-configs:\n  inputs:\n  - a.raw\n  matrix:\n    configs:\n      -\n          - base\n          - tuning\n      -\n          - base\n\n#=> `qa batch multiple-configs` will run\n#   with [base, tuning] and [tuning]\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Per-input extra configurations still work."),Object(r.b)("p",{parentName:"blockquote"},"The syntax was inspired from ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"https://0-8-0.docs.drone.io/matrix-builds/"}),"DroneCI"),", ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategy"}),"GithubActions"),", ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=example%2Cparameter-schema#matrix"}),"AzurePipelines"),".")),Object(r.b)("h3",{id:"interpolation"},"Interpolation"),Object(r.b)("p",null,"Matrix variables are interpolated using the ",Object(r.b)("inlineCode",{parentName:"p"},"${matrix.variable}")," syntax:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml"}),"my-batch-multiple-configs:\n  inputs:\n  - image.raw\n  matrix:\n    version: [1, 2]\n  configs:\n    - base-v${matrix.version}\n\n# => will run with [base-v1] and [base-v2]\n")),Object(r.b)("p",null,"And elaborate complex testing strategies:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml"}),'my-batch-multiple-values:\n  inputs:\n  - image.raw\n  matrix:\n    threshold: [1, 2, 3, 4]\n    mode: ["a", "b"]\n  configs:\n    - base\n    - block.threshold: $matrix.threshold\n    - block.mode: $matrix.mode\n\n# => will start 8 runs run with\n#     [base, block.threshold: 1, block.mode: a\n#     [base, block.threshold: 1, block.mode: b\n#     [base, block.threshold: 2, block.mode: a\n#     etc\n')),Object(r.b)("h2",{id:"aliases-for-groups-of-batches"},"Aliases for groups of batches"),Object(r.b)("p",null,"For convenience you can define aliases for batches you often run together. For instance you can do:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="qa/batches.yaml"',title:'"qa/batches.yaml"'}),"aliases:\n  two-batches:\n  - first-batch\n  - second-batch\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"qa batch two-batches\n")),Object(r.b)("h2",{id:"yaml-anchors-and-aliases"},"YAML anchors and aliases"),Object(r.b)("p",null,"For convenience you can define YAML anchors for common configurations"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml",metastring:"{1-3,7}","{1-3,7}":!0}),'.base: &base\n  - base\n  - partial\n\nhdr:\n  configs:\n    - *base\n    - hdr\n  inputs:\n    - A\n    - B\n    - C\n#=> configs == ["base", "partial", "hdr"]\n')),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(t.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(t.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},'YAML "aliases" and "anchors" are standard YAML feature. ',Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"https://confluence.atlassian.com/bitbucket/yaml-anchors-960154027.html"}),"Read more here"),"."))),Object(r.b)("h3",{id:"reusable-configurationsinputs"},"Reusable configurations/inputs"),Object(r.b)("p",null,"Sometimes you want to mix and match reusabe definitions of configs and inputs. YAML anchors let you do it:"),Object(r.b)("pre",null,Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-yaml"}),".inputs_hdr: &inputs_hdr\n  inputs:\n    - A\n    - B\n\n.lots_of_inputs_hdr: &lots_inputs_hdr\n  inputs:\n    - A\n    - B\n    - C\n    - D\n    - E\n    - F\n\n.HDR: &HDR\n  configs:\n    - *base\n    - hdr_base\n    - hdr_motion\n\n.HDR-disabled: &HDR-disabled\n  configs:\n    - *base\n\nhdr:\n  <<: *HDR\n  <<: *inputs_hdr\nno-hdr:\n  <<: *HDR-disabled\n  <<: *inputs_hdr\n# qa --batch-label hdr    batch hdr\n# qa --batch-label no-hdr batch no-hdr\n\n# Maybe on nightly runs you want to run lots of inputs\nlots-of-hdr-inputs:\n  <<: *HDR\n  <<: *lots_inputs_hdr\nlots-of-no-hdr-inputs:\n  <<: *HDR-disabled\n  <<: *lots_inputs_hdr\n")))}l.isMDXComponent=!0},113:function(e,n,a){"use strict";a.d(n,"a",(function(){return p})),a.d(n,"b",(function(){return m}));var t=a(0),i=a.n(t);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function c(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?s(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var b=i.a.createContext({}),l=function(e){var n=i.a.useContext(b),a=n;return e&&(a="function"==typeof e?e(n):c(c({},n),e)),a},p=function(e){var n=l(e.components);return i.a.createElement(b.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},d=i.a.forwardRef((function(e,n){var a=e.components,t=e.mdxType,r=e.originalType,s=e.parentName,b=o(e,["components","mdxType","originalType","parentName"]),p=l(a),d=t,m=p["".concat(s,".").concat(d)]||p[d]||u[d]||r;return a?i.a.createElement(m,c(c({ref:n},b),{},{components:a})):i.a.createElement(m,c({ref:n},b))}));function m(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=a.length,s=new Array(r);s[0]=d;var c={};for(var o in n)hasOwnProperty.call(n,o)&&(c[o]=n[o]);c.originalType=e,c.mdxType="string"==typeof e?e:t,s[1]=c;for(var b=2;b<r;b++)s[b]=a[b];return i.a.createElement.apply(null,s)}return i.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);