(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{153:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return p}));var a=t(1),i=t(9),r=(t(0),t(169)),o={id:"specifying-configurations",sidebar_label:"Configurations",title:"Specifying configurations"},c={id:"specifying-configurations",title:"Specifying configurations",description:"You will want to run code on the same inputs with different configuration. Depending on your field, it could be:\r",source:"@site/docs/specifying-configurations.md",permalink:"/qaboard/docs/specifying-configurations",sidebar_label:"Configurations",sidebar:"docs",previous:{title:"Computing quantitative metrics",permalink:"/qaboard/docs/computing-quantitative-metrics"},next:{title:"Tips for CLI usage",permalink:"/qaboard/docs/using-the-qa-cli"}},s=[{value:"Specifying configurations",id:"specifying-configurations",children:[]},{value:"Common meaning for configurations",id:"common-meaning-for-configurations",children:[{value:"Use-case #1: Running Python code",id:"use-case-1-running-python-code",children:[]},{value:"Use-case #2: Running an executable",id:"use-case-2-running-an-executable",children:[]}]}],u={rightToc:s};function p(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"You will want to run code on the same inputs with different configuration. Depending on your field, it could be:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"enabling a debug/verbose mode"),Object(r.b)("li",{parentName:"ul"},"using a debug/release build"),Object(r.b)("li",{parentName:"ul"},"providing various hyperparameters"),Object(r.b)("li",{parentName:"ul"},"forward CLI flags for an executable"),Object(r.b)("li",{parentName:"ul"},"load registers values"),Object(r.b)("li",{parentName:"ul"},"read configuration from files"),Object(r.b)("li",{parentName:"ul"},"etc.")),Object(r.b)("p",null,"There is a huge variety of configuration formats and needs. Hence, QA-Board is not very opiniated. The ",Object(r.b)("inlineCode",{parentName:"p"},"run()")," function will provide a ",Object(r.b)("strong",{parentName:"p"},"list of configurations"),", which are are free to interpret however you please."),Object(r.b)("div",{className:"admonition admonition-tip"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("div",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"div"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Access configurations using ",Object(r.b)("inlineCode",{parentName:"p"},"context.obj['configurations']"),". It defaults to ",Object(r.b)("inlineCode",{parentName:"p"},"[]"),", or the value of ",Object(r.b)("inlineCode",{parentName:"p"},"inputs.configurations")," in ",Object(r.b)("em",{parentName:"p"},"qatools.yaml"),"."))),Object(r.b)("h2",{id:"specifying-configurations"},"Specifying configurations"),Object(r.b)("p",null,"You can specify configurations on the CLI:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"qa --configuration low-power run --input my/test\n#=> ctx.obj['configuration'] = ['low-power']\nqa --configuration base:delta run --input my/test\n#=> ctx.obj['configuration'] = ['base', 'delta']\n\n# Note: The \":\"-separated syntax will be replaced by just giving multiple --configuration flags.\n#       Users usually run batches, and rarely write `qa run` commands by hand.\n")),Object(r.b)("p",null,"If you use batches:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml",metastring:"{5-7}","{5-7}":!0}),"# qa/batches.yaml\nmy-batch:\n  inputs:\n  - A.jpg\n  configurations:\n  - base\n  - delta\n\n# $ qa batch my-batch\n# => qa --configuration base:delta run A.jpg\n# => qa --configuration base:delta run B.jpg\n")),Object(r.b)("h2",{id:"common-meaning-for-configurations"},"Common meaning for configurations"),Object(r.b)("p",null,"While QA-Board is not opiniated, projects usually consider that each configuration in ",Object(r.b)("inlineCode",{parentName:"p"},'ctx.obj["configurations"]'),' is meant to be merged with ones before. Using "delta"/"cascading"/"partial" configurations is easy to work with.\nstandardize on setups like:'),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"# ctx.obj['configuration'] as YAML:\nconfigurations:\n- base                     # load from a file, e.g. ./configs/{base}.yaml, kept in source control\n- /abs/path/to/config.yaml # read from absolute paths for convenience\n- key: value               # give directly parameters...\n- section:                 # don't be shy to structure parameters!\n    key2: value2\n")),Object(r.b)("p",null,"You are free to pick different conventions."),Object(r.b)("div",{className:"admonition admonition-note"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("div",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"div"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"API Design")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Today the API provides tuning parameters via ",Object(r.b)("inlineCode",{parentName:"p"},"extra_parameters"),", as a dict... In the future we may simply append it to ctx.obj","['configurations']",", to let users transparently do tuning. "))),Object(r.b)("h3",{id:"use-case-1-running-python-code"},"Use-case #1: Running Python code"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'from pathlib import Path\nimport yaml\n\ndef run():\n    parameters = {}\n    for c in context.obj["configurations"]:\n      if isinstance(c, str): # Load from a file.\n         # Supports absolute paths for free\n         config_path = Path(\'configurations\') / f"{c}.yaml"\n         with config_path.open() as f:\n             new_parameters = yaml.load(f)\n      if isinstance(c, dict):\n          new_parameters = c \n    # Maybe you will prefer deep-merges\n    parameters.update(new_parameters)\n    if context.obj["extra_parameters"]:\n        parameters.update(context.obj["extra_parameters"])\n\n    return my_custom_run(\n        input=context.obj["absolute_input_path"],\n        output=context.obj["output_directory"],\n        parameters=parameters\n    )\n')),Object(r.b)("h3",{id:"use-case-2-running-an-executable"},"Use-case #2: Running an executable"),Object(r.b)("p",null,"It could work as before with"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"    # --snip--\n    config_path = context.obj[\"output_directory\"] / \"config.yaml\" \n    with config_path.open('w') as f:\n        yaml.dump(parameters, f)\n\n    # --snip--\n    command = [\n        # ...\n        '--configuration', str(config_path),\n        # ...\n    ]\n")),Object(r.b)("p",null,"You could also parse the dicts to add CLI parameters... Whatever works for you!"))}p.isMDXComponent=!0},169:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return m}));var a=t(0),i=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=i.a.createContext({}),p=function(e){var n=i.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):c({},n,{},e)),t},l=function(e){var n=p(e.components);return i.a.createElement(u.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},d=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=p(t),d=a,m=l["".concat(o,".").concat(d)]||l[d]||b[d]||r;return t?i.a.createElement(m,c({ref:n},u,{components:t})):i.a.createElement(m,c({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var u=2;u<r;u++)o[u]=t[u];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);