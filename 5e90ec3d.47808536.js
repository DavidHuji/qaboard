(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{118:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function b(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){b(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},b=Object.keys(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=r.a.createContext({}),p=function(e){var t=r.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},s=function(e){var t=p(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,b=e.originalType,i=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),s=p(a),d=n,u=s["".concat(i,".").concat(d)]||s[d]||m[d]||b;return a?r.a.createElement(u,c(c({ref:t},o),{},{components:a})):r.a.createElement(u,c({ref:t},o))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var b=a.length,i=new Array(b);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var o=2;o<b;o++)i[o]=a[o];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},81:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return p}));var n=a(2),r=a(6),b=(a(0),a(118)),i={id:"inputs",sidebar_label:"From Inputs to Outputs",title:"From Inputs to Outputs"},c={unversionedId:"inputs",id:"inputs",isDocsHomePage:!1,title:"From Inputs to Outputs",description:"What is a run?",source:"@site/docs/inputs.md",permalink:"/qaboard/docs/inputs",editUrl:"https://github.com/Samsung/qaboard/edit/master/website/docs/inputs.md",sidebar_label:"From Inputs to Outputs",sidebar:"docs",previous:{title:"Adding QA-Board to your project",permalink:"/qaboard/docs/project-init"},next:{title:"Running your code",permalink:"/qaboard/docs/running-your-code"}},l=[{value:"What is a run?",id:"what-is-a-run",children:[]},{value:"How QA-Board looks for inputs",id:"how-qa-board-looks-for-inputs",children:[]},{value:"Batches of inputs",id:"batches-of-inputs",children:[]},{value:"<em>(Optional)</em> Identifying inputs",id:"optional-identifying-inputs",children:[]},{value:"<em>(Advanced)</em> Handling multiple input types",id:"advanced-handling-multiple-input-types",children:[]}],o={rightToc:l};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(b.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h2",{id:"what-is-a-run"},"What is a run?"),Object(b.b)("p",null,"QA-Board will run:"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"your code on ",Object(b.b)("strong",{parentName:"li"},"inputs")," with a given ",Object(b.b)("strong",{parentName:"li"},"configuration")),Object(b.b)("li",{parentName:"ul"},"and expect ",Object(b.b)("strong",{parentName:"li"},"outputs files")," along with ",Object(b.b)("strong",{parentName:"li"},"metrics"),".")),Object(b.b)("p",null,"Depending on your domain, those will be different. Here are some examples:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Domain"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Input"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Configuration"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Output"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Metric"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"Image processing")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"image"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"feature flag & params"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"transformed image, debug data..."),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"SNR, sharpness, color accuracy...")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"Cloud server choice")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"integration test"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"instance type"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cost, throughput...")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"Machine learning")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"database/sample"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"hyperparameters"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"convergence plots / individual results"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"loss")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"Optimization research")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"problem"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"model type, solver"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"solution"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cost, runtime...")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"Software performance")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"unit test"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"feature flag, platform"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"perf")," recordings, benchmark histograms"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"runtime, memory, latency, IPC, throughput...")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"Hardware/driver perf")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"hardware/unit-test"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"https://github.com/arthur-flam/sysbench-qaboard"}),"sysbench config")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"latency histogram"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ops/s, runtime...")))),Object(b.b)("h2",{id:"how-qa-board-looks-for-inputs"},"How QA-Board looks for inputs"),Object(b.b)("p",null,"To make things simple, QA-Board expects that your inputs are existing ",Object(b.b)("strong",{parentName:"p"},"paths"),"."),Object(b.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(b.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(b.b)("h5",{parentName:"div"},Object(b.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(b.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(b.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(b.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(b.b)("p",{parentName:"div"},"It is also possible to use external databases not just files. Or use a list of unit tests...  If you need it, ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"metadata-integration-external-databases"}),"read this"),"."))),Object(b.b)("p",null,"Try to run:"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"qa run --input /dev/random\n#=> it should invite you to run *your* code\n")),Object(b.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(b.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(b.b)("h5",{parentName:"div"},Object(b.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(b.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(b.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(b.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(b.b)("p",{parentName:"div"},'Relative paths will be searched relative to the "database". The default is ',Object(b.b)("inlineCode",{parentName:"p"},"/")," (or ",Object(b.b)("inlineCode",{parentName:"p"},"C://")," on Windows), and you can change it in ",Object(b.b)("em",{parentName:"p"},"qaboard.yaml")," (",Object(b.b)("inlineCode",{parentName:"p"},"inputs.database"),").  "))),Object(b.b)("h2",{id:"batches-of-inputs"},"Batches of inputs"),Object(b.b)("p",null,"To run on batches of multiple inputs, use ",Object(b.b)("inlineCode",{parentName:"p"},"qa batch my-batch"),", where ",Object(b.b)("strong",{parentName:"p"},"my-batch")," is defined in:"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="qa/batches.yaml (can be changed in qaboard.yaml via inputs.batches)"',title:'"qa/batches.yaml',"(can":!0,be:!0,changed:!0,in:!0,"qaboard.yaml":!0,via:!0,'inputs.batches)"':!0}),"my-batch:\n inputs:\n   - images/A.jpg\n   - images/B.jpg\n")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"qa batch my-batch\n#=> qa run --input images/A.jpg\n#=> qa run --input images/B.jpg\n")),Object(b.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(b.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(b.b)("h5",{parentName:"div"},Object(b.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(b.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(b.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(b.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(b.b)("p",{parentName:"div"},"We'll cover ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"batches-running-on-multiple-inputs"}),"batches in more depth later"),". By default, batches run in parallel locally, but you can easily setup an async task queue like ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"celery-integration"}),"Celery")," or ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/Samsung/qaboard/wiki/Adding-new-runners"}),"others"),"."))),Object(b.b)("h2",{id:"optional-identifying-inputs"},Object(b.b)("em",{parentName:"h2"},"(Optional)")," Identifying inputs"),Object(b.b)("p",null,'You\'ll often want to do something like "run on all the images in a given folder". For that to work, you have to tell QA-Board how to identify those images as inputs.'),Object(b.b)("p",null,"In ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/Samsung/qaboard/blob/master/qaboard/sample_project/qaboard.yaml"}),Object(b.b)("em",{parentName:"a"},"qaboard.yaml"))," edit and ",Object(b.b)("inlineCode",{parentName:"p"},"inputs.globs")," with a ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.python.org/3/library/glob.html"}),"glob pattern"),". Here is an example where your inputs are ",Object(b.b)("em",{parentName:"p"},".jpg")," images:"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="qaboard.yaml"',title:'"qaboard.yaml"'}),"inputs:\n  globs: '*.jpg'\n")),Object(b.b)("p",null,"When you do this, you no longer have to define an explicit list of input paths in your batches. You can instead use folders or even ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.python.org/3/library/glob.html"}),"globs/wildcards")," (",Object(b.b)("inlineCode",{parentName:"p"},"*"),", ",Object(b.b)("inlineCode",{parentName:"p"},"**"),"...):"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="qa/batches.yaml"',title:'"qa/batches.yaml"'}),"my-batch:\n inputs:\n   - images\n")),Object(b.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(b.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(b.b)("h5",{parentName:"div"},Object(b.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(b.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(b.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(b.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(b.b)("p",{parentName:"div"},"To run on all the inputs found under ",Object(b.b)("inlineCode",{parentName:"p"},"$database / $PATH")," you can simply use ",Object(b.b)("inlineCode",{parentName:"p"},"qa batch $PATH"),"."))),Object(b.b)("p",null,"You can give multiple patterns:"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="qaboard.yaml"',title:'"qaboard.yaml"'}),"inputs:\n  globs:\n  - '*.jpg'\n  - '*.bmp'\n  - '*.dng'\n")),Object(b.b)("p",null,"A common use case is identifying folders containing a file patching a pattern, for instance movies given a sequence of frames, ",Object(b.b)("em",{parentName:"p"},"frame_000.jpg"),", ",Object(b.b)("em",{parentName:"p"},"frame_001.jpg"),"... In this case you can use ",Object(b.b)("inlineCode",{parentName:"p"},"use_parent_folder"),":"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'{3} title="qaboard.yaml"',"{3}":!0,title:'"qaboard.yaml"'}),"inputs:\n  globs: frame_000.jpg\n  use_parent_folder: true\n")),Object(b.b)("h2",{id:"advanced-handling-multiple-input-types"},Object(b.b)("em",{parentName:"h2"},"(Advanced)")," Handling multiple input types"),Object(b.b)("p",null,"Big projects sometimes need to distinguish different types of inputs, which will be processed with a different logic."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="qaboard.yaml" {3-9}',title:'"qaboard.yaml"',"{3-9}":!0}),"inputs:\n  types:\n    default: image\n    image:\n      globs: '*.raw'\n    movie:\n      globs: frame_000.jpg\n      use_parent_folder: true\n      # you can override the defaults per-type\n      database:\n        linux: /mnt/movies\n        windows: F://movies\n")),Object(b.b)("p",null,"You can choose what type each batch is: "),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml",metastring:'{7} title="qa/batches.yaml"',"{7}":!0,title:'"qa/batches.yaml"'}),"my-images:\n  inputs:\n  - my/image.jpg\n\nmy-batch:\n  type: movie\n  inputs:\n  - folder/of/movies\n  - other/movies\n")),Object(b.b)("p",null,"If needed, you can also specify the input type from the CLI:"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"qa batch my-imagess              # by default look for images\nqa --type movie batch my-movies  # here we look for movies\n")))}p.isMDXComponent=!0}}]);