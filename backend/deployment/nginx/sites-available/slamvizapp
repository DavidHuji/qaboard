server {
  # This endpoint is only used for HTTP API calls,
  # until all clients trusts IT's certficates
  listen 5000;
  listen [::]:5000;
  server_name qa, qatools01, localhost, 106.199.20.32;

  location ^~ /api {
      include uwsgi_params;
      uwsgi_pass unix:/qaboard/backend/deployment/qaboard.sock;
      uwsgi_read_timeout 300;
  }
  location ^~ /webhook {
      include uwsgi_params;
      uwsgi_pass unix:/qaboard/backend/deployment/qaboard.sock;
  }


  location ^~ /s/algo_archive/ {
      alias /net/f2/algo_archive/; 
      autoindex on;
      access_log off;

      if ($request_method ~* "(GET|POST)") {
        add_header "Access-Control-Allow-Origin"  *;
      }
      # Preflighted requests
      if ($request_method = OPTIONS ) {
        add_header "Access-Control-Allow-Origin"  *;
        add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD";
        add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
        return 200;
      }
  }

  location ^~ /s/algo_data/ {
      alias /stage/algo_data/; 
      autoindex on;
      access_log off;

      if ($request_method ~* "(GET|POST)") {
        add_header "Access-Control-Allow-Origin"  *;
      }
      # Preflighted requests
      if ($request_method = OPTIONS ) {
        add_header "Access-Control-Allow-Origin"  *;
        add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD";
        add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
        return 200;
      }
 }

 location ^~ /s/net/f2/algo_archive/ {
  alias /net/f2/algo_archive/; 
  autoindex on;
  access_log off;

  if ($request_method ~* "(GET|POST)") {
    add_header "Access-Control-Allow-Origin"  *;
  }
  # Preflighted requests
  if ($request_method = OPTIONS ) {
    add_header "Access-Control-Allow-Origin"  *;
    add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD";
    add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
    return 200;
  }
 }

 location ^~ /s/stage/algo_data/ {
  alias /stage/algo_data/;
  autoindex on;
  access_log off;

  if ($request_method ~* "(GET|POST)") {
    add_header "Access-Control-Allow-Origin"  *;
  }
  # Preflighted requests
  if ($request_method = OPTIONS ) {
    add_header "Access-Control-Allow-Origin"  *;
    add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD";
    add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
    return 200;
  }
 }


 # http://nginx.org/en/docs/http/ngx_http_dav_module.html
 location /davs/stage/ {
  alias /stage/;
  # if (-d $request_filename) { rewrite ^(.*[^/])$ $1/ break; }
  # if ($request_method = MKCOL) { rewrite ^(.*[^/])$ $1/ break; }

  # enable creating directories without trailing slash
  set $x $uri$request_method;
  if ($x ~ [^/]MKCOL$) {
      rewrite ^(.*)$ $1/;
  }

  client_body_temp_path /temp;
  client_max_body_size 500M;

  autoindex               on;
  dav_methods             PUT DELETE MKCOL COPY MOVE;
  dav_ext_methods         PROPFIND OPTIONS;
  create_full_put_path    on;
  dav_access              group:rw  all:r;

  # $ sudo mkdir -p /etc/nginx/passwd
  # $ sudo htpasswd -c /etc/nginx/passwd/webdav_pass S1rC
  # auth_basic "Enter Password:";
  # auth_basic_user_file "/etc/nginx/passwd/webdav_pass";
 }
 location /davs/net/f2/ {
  alias /net/f2/;
  # if (-d $request_filename) { rewrite ^(.*[^/])$ $1/ break; }
  # if ($request_method = MKCOL) { rewrite ^(.*[^/])$ $1/ break; }

  # enable creating directories without trailing slash
  set $x $uri$request_method;
  if ($x ~ [^/]MKCOL$) {
      rewrite ^(.*)$ $1/;
  }

  client_body_temp_path /temp;
  client_max_body_size 500M;

  autoindex               on;
  dav_methods             PUT DELETE MKCOL COPY MOVE;
  dav_ext_methods         PROPFIND OPTIONS;
  create_full_put_path    on;
  dav_access              group:rw  all:r;
 }



}




server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name qa, qatools01, localhost, 106.199.20.32;

  ssl_certificate_key /etc/nginx/ssl/dvs/dvs.key;
  ssl_certificate /etc/nginx/ssl/dvs/dvs.pem;

  location ~* (service-worker\.js)$ {
    add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
    expires off;
    proxy_no_cache 1;
    root /qaboard/qaboard-webapp/build;
    try_files $uri $uri/index.html $uri.html /index.html;
  }

  location ~* \.(?:css|js)$ {
    expires 1y;
    access_log off;
    add_header Cache-Control "public";
    root /qaboard/qaboard-webapp/build;
    try_files $uri $uri/index.html $uri.html /index.html;
  }

  location / {
    root /qaboard/qaboard-webapp/build;
    try_files $uri $uri/index.html $uri.html /index.html;
  }

  location ^~ /api {
      include uwsgi_params;
      uwsgi_pass unix:/qaboard/backend/deployment/qaboard.sock;
      uwsgi_read_timeout 300;
      if ($request_method ~* "(GET|POST|PUT|DELETE)") {
        add_header "Access-Control-Allow-Origin"  *;
      }
      # Preflighted requests
      if ($request_method = OPTIONS ) {
        add_header "Access-Control-Allow-Origin"  *;
        add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD";
        add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
        return 200;
      }
  }
  location ^~ /webhook {
      include uwsgi_params;
      uwsgi_pass unix:/qaboard/backend/deployment/qaboard.sock;
  }
  location ^~ /admin {
      include uwsgi_params;
      uwsgi_pass unix:/qaboard/backend/deployment/qaboard.sock;
  }


 location ^~ /s/ {
  alias /home/arthurf/ci/;
  autoindex on;
  access_log off;

  if ($request_method ~* "(GET|POST)") {
    add_header "Access-Control-Allow-Origin"  *;
  }
  # Preflighted requests
  if ($request_method = OPTIONS ) {
    add_header "Access-Control-Allow-Origin"  *;
    add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD";
    add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
    return 200;
  }
 }

 location ^~ /s/home/ {
  alias /home/;
  autoindex on;
  access_log off;

  if ($request_method ~* "(GET|POST)") {
    add_header "Access-Control-Allow-Origin"  *;
  }
  # Preflighted requests
  if ($request_method = OPTIONS ) {
    add_header "Access-Control-Allow-Origin"  *;
    add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD";
    add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
    return 200;
  }
 }

 location ^~ /s/home/arthurf {
    deny all; 
 }

 location ^~ /s/algo_archive/ {
  alias /net/f2/algo_archive/; 
  autoindex on;
  access_log off;

  if ($request_method ~* "(GET|POST)") {
    add_header "Access-Control-Allow-Origin"  *;
  }
  # Preflighted requests
  if ($request_method = OPTIONS ) {
    add_header "Access-Control-Allow-Origin"  *;
    add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD";
    add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
    return 200;
  }
 }

 location ^~ /s/algo_data/ {
  alias /stage/algo_data/; 
  autoindex on;
  access_log off;

  if ($request_method ~* "(GET|POST)") {
    add_header "Access-Control-Allow-Origin"  *;
  }
  # Preflighted requests
  if ($request_method = OPTIONS ) {
    add_header "Access-Control-Allow-Origin"  *;
    add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD";
    add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
    return 200;
  }
 }

 location ^~ /s/net/f2/algo_archive/ {
  alias /net/f2/algo_archive/; 
  autoindex on;
  access_log off;

  if ($request_method ~* "(GET|POST)") {
    add_header "Access-Control-Allow-Origin"  *;
  }
  # Preflighted requests
  if ($request_method = OPTIONS ) {
    add_header "Access-Control-Allow-Origin"  *;
    add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD";
    add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
    return 200;
  }
 }

 location ^~ /s/stage/algo_data/ {
  alias /stage/algo_data/;
  autoindex on;
  access_log off;

  if ($request_method ~* "(GET|POST)") {
    add_header "Access-Control-Allow-Origin"  *;
  }
  # Preflighted requests
  if ($request_method = OPTIONS ) {
    add_header "Access-Control-Allow-Origin"  *;
    add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD";
    add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept";
    return 200;
  }
 }


 # http://nginx.org/en/docs/http/ngx_http_dav_module.html
 location /davs/stage/ {
  alias /stage/;
  # if (-d $request_filename) { rewrite ^(.*[^/])$ $1/ break; }
  # if ($request_method = MKCOL) { rewrite ^(.*[^/])$ $1/ break; }

  client_body_temp_path /temp;
  client_max_body_size 500M;

  autoindex               on;
  dav_methods             PUT DELETE MKCOL COPY MOVE;
  dav_ext_methods         PROPFIND OPTIONS;
  create_full_put_path    on;
  dav_access              group:rw  all:r;

  # enable creating directories without trailing slash
  set $x $uri$request_method;
  if ($x ~ [^/]MKCOL$) {
      rewrite ^(.*)$ $1/;
  }

  # $ sudo mkdir -p /etc/nginx/passwd
  # $ sudo htpasswd -c /etc/nginx/passwd/webdav_pass S1rC
  # auth_basic "Enter Password:";
  # auth_basic_user_file "/etc/nginx/passwd/webdav_pass";
 }
 location /davs/net/f2/ {
  alias /net/f2/;
  # if (-d $request_filename) { rewrite ^(.*[^/])$ $1/ break; }
  # if ($request_method = MKCOL) { rewrite ^(.*[^/])$ $1/ break; }

  # enable creating directories without trailing slash
  set $x $uri$request_method;
  if ($x ~ [^/]MKCOL$) {
      rewrite ^(.*)$ $1/;
  }

  client_body_temp_path /temp;
  client_max_body_size 500M;

  autoindex               on;
  dav_methods             PUT DELETE MKCOL COPY MOVE;
  dav_ext_methods         PROPFIND OPTIONS;
  create_full_put_path    on;
  dav_access              group:rw  all:r;
 }

}
